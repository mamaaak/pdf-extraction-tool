"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/form-data";
exports.ids = ["vendor-chunks/form-data"];
exports.modules = {

/***/ "(ssr)/./node_modules/form-data/lib/form_data.js":
/*!*************************************************!*\
  !*** ./node_modules/form-data/lib/form_data.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nvar CombinedStream = __webpack_require__(/*! combined-stream */ \"(ssr)/./node_modules/combined-stream/lib/combined_stream.js\");\r\nvar util = __webpack_require__(/*! util */ \"util\");\r\nvar path = __webpack_require__(/*! path */ \"path\");\r\nvar http = __webpack_require__(/*! http */ \"http\");\r\nvar https = __webpack_require__(/*! https */ \"https\");\r\nvar parseUrl = (__webpack_require__(/*! url */ \"url\").parse);\r\nvar fs = __webpack_require__(/*! fs */ \"fs\");\r\nvar Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\r\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\r\nvar mime = __webpack_require__(/*! mime-types */ \"(ssr)/./node_modules/mime-types/index.js\");\r\nvar asynckit = __webpack_require__(/*! asynckit */ \"(ssr)/./node_modules/asynckit/index.js\");\r\nvar setToStringTag = __webpack_require__(/*! es-set-tostringtag */ \"(ssr)/./node_modules/es-set-tostringtag/index.js\");\r\nvar hasOwn = __webpack_require__(/*! hasown */ \"(ssr)/./node_modules/hasown/index.js\");\r\nvar populate = __webpack_require__(/*! ./populate.js */ \"(ssr)/./node_modules/form-data/lib/populate.js\");\r\n\r\n/**\r\n * Create readable \"multipart/form-data\" streams.\r\n * Can be used to submit forms\r\n * and file uploads to other web applications.\r\n *\r\n * @constructor\r\n * @param {object} options - Properties to be added/overriden for FormData and CombinedStream\r\n */\r\nfunction FormData(options) {\r\n  if (!(this instanceof FormData)) {\r\n    return new FormData(options);\r\n  }\r\n\r\n  this._overheadLength = 0;\r\n  this._valueLength = 0;\r\n  this._valuesToMeasure = [];\r\n\r\n  CombinedStream.call(this);\r\n\r\n  options = options || {}; // eslint-disable-line no-param-reassign\r\n  for (var option in options) { // eslint-disable-line no-restricted-syntax\r\n    this[option] = options[option];\r\n  }\r\n}\r\n\r\n// make it a Stream\r\nutil.inherits(FormData, CombinedStream);\r\n\r\nFormData.LINE_BREAK = '\\r\\n';\r\nFormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';\r\n\r\nFormData.prototype.append = function (field, value, options) {\r\n  options = options || {}; // eslint-disable-line no-param-reassign\r\n\r\n  // allow filename as single option\r\n  if (typeof options === 'string') {\r\n    options = { filename: options }; // eslint-disable-line no-param-reassign\r\n  }\r\n\r\n  var append = CombinedStream.prototype.append.bind(this);\r\n\r\n  // all that streamy business can't handle numbers\r\n  if (typeof value === 'number' || value == null) {\r\n    value = String(value); // eslint-disable-line no-param-reassign\r\n  }\r\n\r\n  // https://github.com/felixge/node-form-data/issues/38\r\n  if (Array.isArray(value)) {\r\n    /*\r\n     * Please convert your array into string\r\n     * the way web server expects it\r\n     */\r\n    this._error(new Error('Arrays are not supported.'));\r\n    return;\r\n  }\r\n\r\n  var header = this._multiPartHeader(field, value, options);\r\n  var footer = this._multiPartFooter();\r\n\r\n  append(header);\r\n  append(value);\r\n  append(footer);\r\n\r\n  // pass along options.knownLength\r\n  this._trackLength(header, value, options);\r\n};\r\n\r\nFormData.prototype._trackLength = function (header, value, options) {\r\n  var valueLength = 0;\r\n\r\n  /*\r\n   * used w/ getLengthSync(), when length is known.\r\n   * e.g. for streaming directly from a remote server,\r\n   * w/ a known file a size, and not wanting to wait for\r\n   * incoming file to finish to get its size.\r\n   */\r\n  if (options.knownLength != null) {\r\n    valueLength += Number(options.knownLength);\r\n  } else if (Buffer.isBuffer(value)) {\r\n    valueLength = value.length;\r\n  } else if (typeof value === 'string') {\r\n    valueLength = Buffer.byteLength(value);\r\n  }\r\n\r\n  this._valueLength += valueLength;\r\n\r\n  // @check why add CRLF? does this account for custom/multiple CRLFs?\r\n  this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length;\r\n\r\n  // empty or either doesn't have path or not an http response or not a stream\r\n  if (!value || (!value.path && !(value.readable && hasOwn(value, 'httpVersion')) && !(value instanceof Stream))) {\r\n    return;\r\n  }\r\n\r\n  // no need to bother with the length\r\n  if (!options.knownLength) {\r\n    this._valuesToMeasure.push(value);\r\n  }\r\n};\r\n\r\nFormData.prototype._lengthRetriever = function (value, callback) {\r\n  if (hasOwn(value, 'fd')) {\r\n    // take read range into a account\r\n    // `end` = Infinity â€“> read file till the end\r\n    //\r\n    // TODO: Looks like there is bug in Node fs.createReadStream\r\n    // it doesn't respect `end` options without `start` options\r\n    // Fix it when node fixes it.\r\n    // https://github.com/joyent/node/issues/7819\r\n    if (value.end != undefined && value.end != Infinity && value.start != undefined) {\r\n      // when end specified\r\n      // no need to calculate range\r\n      // inclusive, starts with 0\r\n      callback(null, value.end + 1 - (value.start ? value.start : 0)); // eslint-disable-line callback-return\r\n\r\n      // not that fast snoopy\r\n    } else {\r\n      // still need to fetch file size from fs\r\n      fs.stat(value.path, function (err, stat) {\r\n        if (err) {\r\n          callback(err);\r\n          return;\r\n        }\r\n\r\n        // update final size based on the range options\r\n        var fileSize = stat.size - (value.start ? value.start : 0);\r\n        callback(null, fileSize);\r\n      });\r\n    }\r\n\r\n    // or http response\r\n  } else if (hasOwn(value, 'httpVersion')) {\r\n    callback(null, Number(value.headers['content-length'])); // eslint-disable-line callback-return\r\n\r\n    // or request stream http://github.com/mikeal/request\r\n  } else if (hasOwn(value, 'httpModule')) {\r\n    // wait till response come back\r\n    value.on('response', function (response) {\r\n      value.pause();\r\n      callback(null, Number(response.headers['content-length']));\r\n    });\r\n    value.resume();\r\n\r\n    // something else\r\n  } else {\r\n    callback('Unknown stream'); // eslint-disable-line callback-return\r\n  }\r\n};\r\n\r\nFormData.prototype._multiPartHeader = function (field, value, options) {\r\n  /*\r\n   * custom header specified (as string)?\r\n   * it becomes responsible for boundary\r\n   * (e.g. to handle extra CRLFs on .NET servers)\r\n   */\r\n  if (typeof options.header === 'string') {\r\n    return options.header;\r\n  }\r\n\r\n  var contentDisposition = this._getContentDisposition(value, options);\r\n  var contentType = this._getContentType(value, options);\r\n\r\n  var contents = '';\r\n  var headers = {\r\n    // add custom disposition as third element or keep it two elements if not\r\n    'Content-Disposition': ['form-data', 'name=\"' + field + '\"'].concat(contentDisposition || []),\r\n    // if no content type. allow it to be empty array\r\n    'Content-Type': [].concat(contentType || [])\r\n  };\r\n\r\n  // allow custom headers.\r\n  if (typeof options.header === 'object') {\r\n    populate(headers, options.header);\r\n  }\r\n\r\n  var header;\r\n  for (var prop in headers) { // eslint-disable-line no-restricted-syntax\r\n    if (hasOwn(headers, prop)) {\r\n      header = headers[prop];\r\n\r\n      // skip nullish headers.\r\n      if (header == null) {\r\n        continue; // eslint-disable-line no-restricted-syntax, no-continue\r\n      }\r\n\r\n      // convert all headers to arrays.\r\n      if (!Array.isArray(header)) {\r\n        header = [header];\r\n      }\r\n\r\n      // add non-empty headers.\r\n      if (header.length) {\r\n        contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;\r\n      }\r\n    }\r\n  }\r\n\r\n  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;\r\n};\r\n\r\nFormData.prototype._getContentDisposition = function (value, options) { // eslint-disable-line consistent-return\r\n  var filename;\r\n\r\n  if (typeof options.filepath === 'string') {\r\n    // custom filepath for relative paths\r\n    filename = path.normalize(options.filepath).replace(/\\\\/g, '/');\r\n  } else if (options.filename || (value && (value.name || value.path))) {\r\n    /*\r\n     * custom filename take precedence\r\n     * formidable and the browser add a name property\r\n     * fs- and request- streams have path property\r\n     */\r\n    filename = path.basename(options.filename || (value && (value.name || value.path)));\r\n  } else if (value && value.readable && hasOwn(value, 'httpVersion')) {\r\n    // or try http response\r\n    filename = path.basename(value.client._httpMessage.path || '');\r\n  }\r\n\r\n  if (filename) {\r\n    return 'filename=\"' + filename + '\"';\r\n  }\r\n};\r\n\r\nFormData.prototype._getContentType = function (value, options) {\r\n  // use custom content-type above all\r\n  var contentType = options.contentType;\r\n\r\n  // or try `name` from formidable, browser\r\n  if (!contentType && value && value.name) {\r\n    contentType = mime.lookup(value.name);\r\n  }\r\n\r\n  // or try `path` from fs-, request- streams\r\n  if (!contentType && value && value.path) {\r\n    contentType = mime.lookup(value.path);\r\n  }\r\n\r\n  // or if it's http-reponse\r\n  if (!contentType && value && value.readable && hasOwn(value, 'httpVersion')) {\r\n    contentType = value.headers['content-type'];\r\n  }\r\n\r\n  // or guess it from the filepath or filename\r\n  if (!contentType && (options.filepath || options.filename)) {\r\n    contentType = mime.lookup(options.filepath || options.filename);\r\n  }\r\n\r\n  // fallback to the default content type if `value` is not simple value\r\n  if (!contentType && value && typeof value === 'object') {\r\n    contentType = FormData.DEFAULT_CONTENT_TYPE;\r\n  }\r\n\r\n  return contentType;\r\n};\r\n\r\nFormData.prototype._multiPartFooter = function () {\r\n  return function (next) {\r\n    var footer = FormData.LINE_BREAK;\r\n\r\n    var lastPart = this._streams.length === 0;\r\n    if (lastPart) {\r\n      footer += this._lastBoundary();\r\n    }\r\n\r\n    next(footer);\r\n  }.bind(this);\r\n};\r\n\r\nFormData.prototype._lastBoundary = function () {\r\n  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;\r\n};\r\n\r\nFormData.prototype.getHeaders = function (userHeaders) {\r\n  var header;\r\n  var formHeaders = {\r\n    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()\r\n  };\r\n\r\n  for (header in userHeaders) { // eslint-disable-line no-restricted-syntax\r\n    if (hasOwn(userHeaders, header)) {\r\n      formHeaders[header.toLowerCase()] = userHeaders[header];\r\n    }\r\n  }\r\n\r\n  return formHeaders;\r\n};\r\n\r\nFormData.prototype.setBoundary = function (boundary) {\r\n  if (typeof boundary !== 'string') {\r\n    throw new TypeError('FormData boundary must be a string');\r\n  }\r\n  this._boundary = boundary;\r\n};\r\n\r\nFormData.prototype.getBoundary = function () {\r\n  if (!this._boundary) {\r\n    this._generateBoundary();\r\n  }\r\n\r\n  return this._boundary;\r\n};\r\n\r\nFormData.prototype.getBuffer = function () {\r\n  var dataBuffer = new Buffer.alloc(0); // eslint-disable-line new-cap\r\n  var boundary = this.getBoundary();\r\n\r\n  // Create the form content. Add Line breaks to the end of data.\r\n  for (var i = 0, len = this._streams.length; i < len; i++) {\r\n    if (typeof this._streams[i] !== 'function') {\r\n      // Add content to the buffer.\r\n      if (Buffer.isBuffer(this._streams[i])) {\r\n        dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);\r\n      } else {\r\n        dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);\r\n      }\r\n\r\n      // Add break after content.\r\n      if (typeof this._streams[i] !== 'string' || this._streams[i].substring(2, boundary.length + 2) !== boundary) {\r\n        dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData.LINE_BREAK)]);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Add the footer and return the Buffer object.\r\n  return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);\r\n};\r\n\r\nFormData.prototype._generateBoundary = function () {\r\n  // This generates a 50 character boundary similar to those used by Firefox.\r\n\r\n  // They are optimized for boyer-moore parsing.\r\n  this._boundary = '--------------------------' + crypto.randomBytes(12).toString('hex');\r\n};\r\n\r\n// Note: getLengthSync DOESN'T calculate streams length\r\n// As workaround one can calculate file size manually and add it as knownLength option\r\nFormData.prototype.getLengthSync = function () {\r\n  var knownLength = this._overheadLength + this._valueLength;\r\n\r\n  // Don't get confused, there are 3 \"internal\" streams for each keyval pair so it basically checks if there is any value added to the form\r\n  if (this._streams.length) {\r\n    knownLength += this._lastBoundary().length;\r\n  }\r\n\r\n  // https://github.com/form-data/form-data/issues/40\r\n  if (!this.hasKnownLength()) {\r\n    /*\r\n     * Some async length retrievers are present\r\n     * therefore synchronous length calculation is false.\r\n     * Please use getLength(callback) to get proper length\r\n     */\r\n    this._error(new Error('Cannot calculate proper length in synchronous way.'));\r\n  }\r\n\r\n  return knownLength;\r\n};\r\n\r\n// Public API to check if length of added values is known\r\n// https://github.com/form-data/form-data/issues/196\r\n// https://github.com/form-data/form-data/issues/262\r\nFormData.prototype.hasKnownLength = function () {\r\n  var hasKnownLength = true;\r\n\r\n  if (this._valuesToMeasure.length) {\r\n    hasKnownLength = false;\r\n  }\r\n\r\n  return hasKnownLength;\r\n};\r\n\r\nFormData.prototype.getLength = function (cb) {\r\n  var knownLength = this._overheadLength + this._valueLength;\r\n\r\n  if (this._streams.length) {\r\n    knownLength += this._lastBoundary().length;\r\n  }\r\n\r\n  if (!this._valuesToMeasure.length) {\r\n    process.nextTick(cb.bind(this, null, knownLength));\r\n    return;\r\n  }\r\n\r\n  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function (err, values) {\r\n    if (err) {\r\n      cb(err);\r\n      return;\r\n    }\r\n\r\n    values.forEach(function (length) {\r\n      knownLength += length;\r\n    });\r\n\r\n    cb(null, knownLength);\r\n  });\r\n};\r\n\r\nFormData.prototype.submit = function (params, cb) {\r\n  var request;\r\n  var options;\r\n  var defaults = { method: 'post' };\r\n\r\n  // parse provided url if it's string or treat it as options object\r\n  if (typeof params === 'string') {\r\n    params = parseUrl(params); // eslint-disable-line no-param-reassign\r\n    /* eslint sort-keys: 0 */\r\n    options = populate({\r\n      port: params.port,\r\n      path: params.pathname,\r\n      host: params.hostname,\r\n      protocol: params.protocol\r\n    }, defaults);\r\n  } else { // use custom params\r\n    options = populate(params, defaults);\r\n    // if no port provided use default one\r\n    if (!options.port) {\r\n      options.port = options.protocol === 'https:' ? 443 : 80;\r\n    }\r\n  }\r\n\r\n  // put that good code in getHeaders to some use\r\n  options.headers = this.getHeaders(params.headers);\r\n\r\n  // https if specified, fallback to http in any other case\r\n  if (options.protocol === 'https:') {\r\n    request = https.request(options);\r\n  } else {\r\n    request = http.request(options);\r\n  }\r\n\r\n  // get content length and fire away\r\n  this.getLength(function (err, length) {\r\n    if (err && err !== 'Unknown stream') {\r\n      this._error(err);\r\n      return;\r\n    }\r\n\r\n    // add content length\r\n    if (length) {\r\n      request.setHeader('Content-Length', length);\r\n    }\r\n\r\n    this.pipe(request);\r\n    if (cb) {\r\n      var onResponse;\r\n\r\n      var callback = function (error, responce) {\r\n        request.removeListener('error', callback);\r\n        request.removeListener('response', onResponse);\r\n\r\n        return cb.call(this, error, responce); // eslint-disable-line no-invalid-this\r\n      };\r\n\r\n      onResponse = callback.bind(this, null);\r\n\r\n      request.on('error', callback);\r\n      request.on('response', onResponse);\r\n    }\r\n  }.bind(this));\r\n\r\n  return request;\r\n};\r\n\r\nFormData.prototype._error = function (err) {\r\n  if (!this.error) {\r\n    this.error = err;\r\n    this.pause();\r\n    this.emit('error', err);\r\n  }\r\n};\r\n\r\nFormData.prototype.toString = function () {\r\n  return '[object FormData]';\r\n};\r\nsetToStringTag(FormData, 'FormData');\r\n\r\n// Public API\r\nmodule.exports = FormData;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/form-data/lib/form_data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/form-data/lib/populate.js":
/*!************************************************!*\
  !*** ./node_modules/form-data/lib/populate.js ***!
  \************************************************/
/***/ ((module) => {

eval("\r\n\r\n// populates missing values\r\nmodule.exports = function (dst, src) {\r\n  Object.keys(src).forEach(function (prop) {\r\n    dst[prop] = dst[prop] || src[prop]; // eslint-disable-line no-param-reassign\r\n  });\r\n\r\n  return dst;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZm9ybS1kYXRhL2xpYi9wb3B1bGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDLEdBQUc7QUFDSDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9mb3JtLWRhdGEvbGliL3BvcHVsYXRlLmpzP2NiNTYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gcG9wdWxhdGVzIG1pc3NpbmcgdmFsdWVzXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRzdCwgc3JjKSB7XHJcbiAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XHJcbiAgICBkc3RbcHJvcF0gPSBkc3RbcHJvcF0gfHwgc3JjW3Byb3BdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBkc3Q7XHJcbn07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/form-data/lib/populate.js\n");

/***/ })

};
;