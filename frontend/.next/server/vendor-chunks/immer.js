"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/immer";
exports.ids = ["vendor-chunks/immer"];
exports.modules = {

/***/ "(ssr)/./node_modules/immer/dist/immer.mjs":
/*!*******************************************!*\
  !*** ./node_modules/immer/dist/immer.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Immer: () => (/* binding */ Immer2),\n/* harmony export */   applyPatches: () => (/* binding */ applyPatches),\n/* harmony export */   castDraft: () => (/* binding */ castDraft),\n/* harmony export */   castImmutable: () => (/* binding */ castImmutable),\n/* harmony export */   createDraft: () => (/* binding */ createDraft),\n/* harmony export */   current: () => (/* binding */ current),\n/* harmony export */   enableMapSet: () => (/* binding */ enableMapSet),\n/* harmony export */   enablePatches: () => (/* binding */ enablePatches),\n/* harmony export */   finishDraft: () => (/* binding */ finishDraft),\n/* harmony export */   freeze: () => (/* binding */ freeze),\n/* harmony export */   immerable: () => (/* binding */ DRAFTABLE),\n/* harmony export */   isDraft: () => (/* binding */ isDraft),\n/* harmony export */   isDraftable: () => (/* binding */ isDraftable),\n/* harmony export */   nothing: () => (/* binding */ NOTHING),\n/* harmony export */   original: () => (/* binding */ original),\n/* harmony export */   produce: () => (/* binding */ produce),\n/* harmony export */   produceWithPatches: () => (/* binding */ produceWithPatches),\n/* harmony export */   setAutoFreeze: () => (/* binding */ setAutoFreeze),\n/* harmony export */   setUseStrictShallowCopy: () => (/* binding */ setUseStrictShallowCopy)\n/* harmony export */ });\n// src/utils/env.ts\r\nvar NOTHING = Symbol.for(\"immer-nothing\");\r\nvar DRAFTABLE = Symbol.for(\"immer-draftable\");\r\nvar DRAFT_STATE = Symbol.for(\"immer-state\");\r\n\r\n// src/utils/errors.ts\r\nvar errors =  true ? [\r\n  // All error codes, starting by 0:\r\n  function(plugin) {\r\n    return `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`;\r\n  },\r\n  function(thing) {\r\n    return `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`;\r\n  },\r\n  \"This object has been frozen and should not be mutated\",\r\n  function(data) {\r\n    return \"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + data;\r\n  },\r\n  \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\r\n  \"Immer forbids circular references\",\r\n  \"The first or second argument to `produce` must be a function\",\r\n  \"The third argument to `produce` must be a function or undefined\",\r\n  \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\r\n  \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\r\n  function(thing) {\r\n    return `'current' expects a draft, got: ${thing}`;\r\n  },\r\n  \"Object.defineProperty() cannot be used on an Immer draft\",\r\n  \"Object.setPrototypeOf() cannot be used on an Immer draft\",\r\n  \"Immer only supports deleting array indices\",\r\n  \"Immer only supports setting array indices and the 'length' property\",\r\n  function(thing) {\r\n    return `'original' expects a draft, got: ${thing}`;\r\n  }\r\n  // Note: if more errors are added, the errorOffset in Patches.ts should be increased\r\n  // See Patches.ts for additional errors\r\n] : 0;\r\nfunction die(error, ...args) {\r\n  if (true) {\r\n    const e = errors[error];\r\n    const msg = typeof e === \"function\" ? e.apply(null, args) : e;\r\n    throw new Error(`[Immer] ${msg}`);\r\n  }\r\n  throw new Error(\r\n    `[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`\r\n  );\r\n}\r\n\r\n// src/utils/common.ts\r\nvar getPrototypeOf = Object.getPrototypeOf;\r\nfunction isDraft(value) {\r\n  return !!value && !!value[DRAFT_STATE];\r\n}\r\nfunction isDraftable(value) {\r\n  if (!value)\r\n    return false;\r\n  return isPlainObject(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!value.constructor?.[DRAFTABLE] || isMap(value) || isSet(value);\r\n}\r\nvar objectCtorString = Object.prototype.constructor.toString();\r\nfunction isPlainObject(value) {\r\n  if (!value || typeof value !== \"object\")\r\n    return false;\r\n  const proto = getPrototypeOf(value);\r\n  if (proto === null) {\r\n    return true;\r\n  }\r\n  const Ctor = Object.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\r\n  if (Ctor === Object)\r\n    return true;\r\n  return typeof Ctor == \"function\" && Function.toString.call(Ctor) === objectCtorString;\r\n}\r\nfunction original(value) {\r\n  if (!isDraft(value))\r\n    die(15, value);\r\n  return value[DRAFT_STATE].base_;\r\n}\r\nfunction each(obj, iter) {\r\n  if (getArchtype(obj) === 0 /* Object */) {\r\n    Reflect.ownKeys(obj).forEach((key) => {\r\n      iter(key, obj[key], obj);\r\n    });\r\n  } else {\r\n    obj.forEach((entry, index) => iter(index, entry, obj));\r\n  }\r\n}\r\nfunction getArchtype(thing) {\r\n  const state = thing[DRAFT_STATE];\r\n  return state ? state.type_ : Array.isArray(thing) ? 1 /* Array */ : isMap(thing) ? 2 /* Map */ : isSet(thing) ? 3 /* Set */ : 0 /* Object */;\r\n}\r\nfunction has(thing, prop) {\r\n  return getArchtype(thing) === 2 /* Map */ ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);\r\n}\r\nfunction get(thing, prop) {\r\n  return getArchtype(thing) === 2 /* Map */ ? thing.get(prop) : thing[prop];\r\n}\r\nfunction set(thing, propOrOldValue, value) {\r\n  const t = getArchtype(thing);\r\n  if (t === 2 /* Map */)\r\n    thing.set(propOrOldValue, value);\r\n  else if (t === 3 /* Set */) {\r\n    thing.add(value);\r\n  } else\r\n    thing[propOrOldValue] = value;\r\n}\r\nfunction is(x, y) {\r\n  if (x === y) {\r\n    return x !== 0 || 1 / x === 1 / y;\r\n  } else {\r\n    return x !== x && y !== y;\r\n  }\r\n}\r\nfunction isMap(target) {\r\n  return target instanceof Map;\r\n}\r\nfunction isSet(target) {\r\n  return target instanceof Set;\r\n}\r\nfunction latest(state) {\r\n  return state.copy_ || state.base_;\r\n}\r\nfunction shallowCopy(base, strict) {\r\n  if (isMap(base)) {\r\n    return new Map(base);\r\n  }\r\n  if (isSet(base)) {\r\n    return new Set(base);\r\n  }\r\n  if (Array.isArray(base))\r\n    return Array.prototype.slice.call(base);\r\n  const isPlain = isPlainObject(base);\r\n  if (strict === true || strict === \"class_only\" && !isPlain) {\r\n    const descriptors = Object.getOwnPropertyDescriptors(base);\r\n    delete descriptors[DRAFT_STATE];\r\n    let keys = Reflect.ownKeys(descriptors);\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const key = keys[i];\r\n      const desc = descriptors[key];\r\n      if (desc.writable === false) {\r\n        desc.writable = true;\r\n        desc.configurable = true;\r\n      }\r\n      if (desc.get || desc.set)\r\n        descriptors[key] = {\r\n          configurable: true,\r\n          writable: true,\r\n          // could live with !!desc.set as well here...\r\n          enumerable: desc.enumerable,\r\n          value: base[key]\r\n        };\r\n    }\r\n    return Object.create(getPrototypeOf(base), descriptors);\r\n  } else {\r\n    const proto = getPrototypeOf(base);\r\n    if (proto !== null && isPlain) {\r\n      return { ...base };\r\n    }\r\n    const obj = Object.create(proto);\r\n    return Object.assign(obj, base);\r\n  }\r\n}\r\nfunction freeze(obj, deep = false) {\r\n  if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj))\r\n    return obj;\r\n  if (getArchtype(obj) > 1) {\r\n    obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;\r\n  }\r\n  Object.freeze(obj);\r\n  if (deep)\r\n    Object.entries(obj).forEach(([key, value]) => freeze(value, true));\r\n  return obj;\r\n}\r\nfunction dontMutateFrozenCollections() {\r\n  die(2);\r\n}\r\nfunction isFrozen(obj) {\r\n  return Object.isFrozen(obj);\r\n}\r\n\r\n// src/utils/plugins.ts\r\nvar plugins = {};\r\nfunction getPlugin(pluginKey) {\r\n  const plugin = plugins[pluginKey];\r\n  if (!plugin) {\r\n    die(0, pluginKey);\r\n  }\r\n  return plugin;\r\n}\r\nfunction loadPlugin(pluginKey, implementation) {\r\n  if (!plugins[pluginKey])\r\n    plugins[pluginKey] = implementation;\r\n}\r\n\r\n// src/core/scope.ts\r\nvar currentScope;\r\nfunction getCurrentScope() {\r\n  return currentScope;\r\n}\r\nfunction createScope(parent_, immer_) {\r\n  return {\r\n    drafts_: [],\r\n    parent_,\r\n    immer_,\r\n    // Whenever the modified draft contains a draft from another scope, we\r\n    // need to prevent auto-freezing so the unowned draft can be finalized.\r\n    canAutoFreeze_: true,\r\n    unfinalizedDrafts_: 0\r\n  };\r\n}\r\nfunction usePatchesInScope(scope, patchListener) {\r\n  if (patchListener) {\r\n    getPlugin(\"Patches\");\r\n    scope.patches_ = [];\r\n    scope.inversePatches_ = [];\r\n    scope.patchListener_ = patchListener;\r\n  }\r\n}\r\nfunction revokeScope(scope) {\r\n  leaveScope(scope);\r\n  scope.drafts_.forEach(revokeDraft);\r\n  scope.drafts_ = null;\r\n}\r\nfunction leaveScope(scope) {\r\n  if (scope === currentScope) {\r\n    currentScope = scope.parent_;\r\n  }\r\n}\r\nfunction enterScope(immer2) {\r\n  return currentScope = createScope(currentScope, immer2);\r\n}\r\nfunction revokeDraft(draft) {\r\n  const state = draft[DRAFT_STATE];\r\n  if (state.type_ === 0 /* Object */ || state.type_ === 1 /* Array */)\r\n    state.revoke_();\r\n  else\r\n    state.revoked_ = true;\r\n}\r\n\r\n// src/core/finalize.ts\r\nfunction processResult(result, scope) {\r\n  scope.unfinalizedDrafts_ = scope.drafts_.length;\r\n  const baseDraft = scope.drafts_[0];\r\n  const isReplaced = result !== void 0 && result !== baseDraft;\r\n  if (isReplaced) {\r\n    if (baseDraft[DRAFT_STATE].modified_) {\r\n      revokeScope(scope);\r\n      die(4);\r\n    }\r\n    if (isDraftable(result)) {\r\n      result = finalize(scope, result);\r\n      if (!scope.parent_)\r\n        maybeFreeze(scope, result);\r\n    }\r\n    if (scope.patches_) {\r\n      getPlugin(\"Patches\").generateReplacementPatches_(\r\n        baseDraft[DRAFT_STATE].base_,\r\n        result,\r\n        scope.patches_,\r\n        scope.inversePatches_\r\n      );\r\n    }\r\n  } else {\r\n    result = finalize(scope, baseDraft, []);\r\n  }\r\n  revokeScope(scope);\r\n  if (scope.patches_) {\r\n    scope.patchListener_(scope.patches_, scope.inversePatches_);\r\n  }\r\n  return result !== NOTHING ? result : void 0;\r\n}\r\nfunction finalize(rootScope, value, path) {\r\n  if (isFrozen(value))\r\n    return value;\r\n  const state = value[DRAFT_STATE];\r\n  if (!state) {\r\n    each(\r\n      value,\r\n      (key, childValue) => finalizeProperty(rootScope, state, value, key, childValue, path)\r\n    );\r\n    return value;\r\n  }\r\n  if (state.scope_ !== rootScope)\r\n    return value;\r\n  if (!state.modified_) {\r\n    maybeFreeze(rootScope, state.base_, true);\r\n    return state.base_;\r\n  }\r\n  if (!state.finalized_) {\r\n    state.finalized_ = true;\r\n    state.scope_.unfinalizedDrafts_--;\r\n    const result = state.copy_;\r\n    let resultEach = result;\r\n    let isSet2 = false;\r\n    if (state.type_ === 3 /* Set */) {\r\n      resultEach = new Set(result);\r\n      result.clear();\r\n      isSet2 = true;\r\n    }\r\n    each(\r\n      resultEach,\r\n      (key, childValue) => finalizeProperty(rootScope, state, result, key, childValue, path, isSet2)\r\n    );\r\n    maybeFreeze(rootScope, result, false);\r\n    if (path && rootScope.patches_) {\r\n      getPlugin(\"Patches\").generatePatches_(\r\n        state,\r\n        path,\r\n        rootScope.patches_,\r\n        rootScope.inversePatches_\r\n      );\r\n    }\r\n  }\r\n  return state.copy_;\r\n}\r\nfunction finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath, targetIsSet) {\r\n  if ( true && childValue === targetObject)\r\n    die(5);\r\n  if (isDraft(childValue)) {\r\n    const path = rootPath && parentState && parentState.type_ !== 3 /* Set */ && // Set objects are atomic since they have no keys.\r\n    !has(parentState.assigned_, prop) ? rootPath.concat(prop) : void 0;\r\n    const res = finalize(rootScope, childValue, path);\r\n    set(targetObject, prop, res);\r\n    if (isDraft(res)) {\r\n      rootScope.canAutoFreeze_ = false;\r\n    } else\r\n      return;\r\n  } else if (targetIsSet) {\r\n    targetObject.add(childValue);\r\n  }\r\n  if (isDraftable(childValue) && !isFrozen(childValue)) {\r\n    if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\r\n      return;\r\n    }\r\n    finalize(rootScope, childValue);\r\n    if ((!parentState || !parentState.scope_.parent_) && typeof prop !== \"symbol\" && Object.prototype.propertyIsEnumerable.call(targetObject, prop))\r\n      maybeFreeze(rootScope, childValue);\r\n  }\r\n}\r\nfunction maybeFreeze(scope, value, deep = false) {\r\n  if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\r\n    freeze(value, deep);\r\n  }\r\n}\r\n\r\n// src/core/proxy.ts\r\nfunction createProxyProxy(base, parent) {\r\n  const isArray = Array.isArray(base);\r\n  const state = {\r\n    type_: isArray ? 1 /* Array */ : 0 /* Object */,\r\n    // Track which produce call this is associated with.\r\n    scope_: parent ? parent.scope_ : getCurrentScope(),\r\n    // True for both shallow and deep changes.\r\n    modified_: false,\r\n    // Used during finalization.\r\n    finalized_: false,\r\n    // Track which properties have been assigned (true) or deleted (false).\r\n    assigned_: {},\r\n    // The parent draft state.\r\n    parent_: parent,\r\n    // The base state.\r\n    base_: base,\r\n    // The base proxy.\r\n    draft_: null,\r\n    // set below\r\n    // The base copy with any updated values.\r\n    copy_: null,\r\n    // Called by the `produce` function.\r\n    revoke_: null,\r\n    isManual_: false\r\n  };\r\n  let target = state;\r\n  let traps = objectTraps;\r\n  if (isArray) {\r\n    target = [state];\r\n    traps = arrayTraps;\r\n  }\r\n  const { revoke, proxy } = Proxy.revocable(target, traps);\r\n  state.draft_ = proxy;\r\n  state.revoke_ = revoke;\r\n  return proxy;\r\n}\r\nvar objectTraps = {\r\n  get(state, prop) {\r\n    if (prop === DRAFT_STATE)\r\n      return state;\r\n    const source = latest(state);\r\n    if (!has(source, prop)) {\r\n      return readPropFromProto(state, source, prop);\r\n    }\r\n    const value = source[prop];\r\n    if (state.finalized_ || !isDraftable(value)) {\r\n      return value;\r\n    }\r\n    if (value === peek(state.base_, prop)) {\r\n      prepareCopy(state);\r\n      return state.copy_[prop] = createProxy(value, state);\r\n    }\r\n    return value;\r\n  },\r\n  has(state, prop) {\r\n    return prop in latest(state);\r\n  },\r\n  ownKeys(state) {\r\n    return Reflect.ownKeys(latest(state));\r\n  },\r\n  set(state, prop, value) {\r\n    const desc = getDescriptorFromProto(latest(state), prop);\r\n    if (desc?.set) {\r\n      desc.set.call(state.draft_, value);\r\n      return true;\r\n    }\r\n    if (!state.modified_) {\r\n      const current2 = peek(latest(state), prop);\r\n      const currentState = current2?.[DRAFT_STATE];\r\n      if (currentState && currentState.base_ === value) {\r\n        state.copy_[prop] = value;\r\n        state.assigned_[prop] = false;\r\n        return true;\r\n      }\r\n      if (is(value, current2) && (value !== void 0 || has(state.base_, prop)))\r\n        return true;\r\n      prepareCopy(state);\r\n      markChanged(state);\r\n    }\r\n    if (state.copy_[prop] === value && // special case: handle new props with value 'undefined'\r\n    (value !== void 0 || prop in state.copy_) || // special case: NaN\r\n    Number.isNaN(value) && Number.isNaN(state.copy_[prop]))\r\n      return true;\r\n    state.copy_[prop] = value;\r\n    state.assigned_[prop] = true;\r\n    return true;\r\n  },\r\n  deleteProperty(state, prop) {\r\n    if (peek(state.base_, prop) !== void 0 || prop in state.base_) {\r\n      state.assigned_[prop] = false;\r\n      prepareCopy(state);\r\n      markChanged(state);\r\n    } else {\r\n      delete state.assigned_[prop];\r\n    }\r\n    if (state.copy_) {\r\n      delete state.copy_[prop];\r\n    }\r\n    return true;\r\n  },\r\n  // Note: We never coerce `desc.value` into an Immer draft, because we can't make\r\n  // the same guarantee in ES5 mode.\r\n  getOwnPropertyDescriptor(state, prop) {\r\n    const owner = latest(state);\r\n    const desc = Reflect.getOwnPropertyDescriptor(owner, prop);\r\n    if (!desc)\r\n      return desc;\r\n    return {\r\n      writable: true,\r\n      configurable: state.type_ !== 1 /* Array */ || prop !== \"length\",\r\n      enumerable: desc.enumerable,\r\n      value: owner[prop]\r\n    };\r\n  },\r\n  defineProperty() {\r\n    die(11);\r\n  },\r\n  getPrototypeOf(state) {\r\n    return getPrototypeOf(state.base_);\r\n  },\r\n  setPrototypeOf() {\r\n    die(12);\r\n  }\r\n};\r\nvar arrayTraps = {};\r\neach(objectTraps, (key, fn) => {\r\n  arrayTraps[key] = function() {\r\n    arguments[0] = arguments[0][0];\r\n    return fn.apply(this, arguments);\r\n  };\r\n});\r\narrayTraps.deleteProperty = function(state, prop) {\r\n  if ( true && isNaN(parseInt(prop)))\r\n    die(13);\r\n  return arrayTraps.set.call(this, state, prop, void 0);\r\n};\r\narrayTraps.set = function(state, prop, value) {\r\n  if ( true && prop !== \"length\" && isNaN(parseInt(prop)))\r\n    die(14);\r\n  return objectTraps.set.call(this, state[0], prop, value, state[0]);\r\n};\r\nfunction peek(draft, prop) {\r\n  const state = draft[DRAFT_STATE];\r\n  const source = state ? latest(state) : draft;\r\n  return source[prop];\r\n}\r\nfunction readPropFromProto(state, source, prop) {\r\n  const desc = getDescriptorFromProto(source, prop);\r\n  return desc ? `value` in desc ? desc.value : (\r\n    // This is a very special case, if the prop is a getter defined by the\r\n    // prototype, we should invoke it with the draft as context!\r\n    desc.get?.call(state.draft_)\r\n  ) : void 0;\r\n}\r\nfunction getDescriptorFromProto(source, prop) {\r\n  if (!(prop in source))\r\n    return void 0;\r\n  let proto = getPrototypeOf(source);\r\n  while (proto) {\r\n    const desc = Object.getOwnPropertyDescriptor(proto, prop);\r\n    if (desc)\r\n      return desc;\r\n    proto = getPrototypeOf(proto);\r\n  }\r\n  return void 0;\r\n}\r\nfunction markChanged(state) {\r\n  if (!state.modified_) {\r\n    state.modified_ = true;\r\n    if (state.parent_) {\r\n      markChanged(state.parent_);\r\n    }\r\n  }\r\n}\r\nfunction prepareCopy(state) {\r\n  if (!state.copy_) {\r\n    state.copy_ = shallowCopy(\r\n      state.base_,\r\n      state.scope_.immer_.useStrictShallowCopy_\r\n    );\r\n  }\r\n}\r\n\r\n// src/core/immerClass.ts\r\nvar Immer2 = class {\r\n  constructor(config) {\r\n    this.autoFreeze_ = true;\r\n    this.useStrictShallowCopy_ = false;\r\n    /**\r\n     * The `produce` function takes a value and a \"recipe function\" (whose\r\n     * return value often depends on the base state). The recipe function is\r\n     * free to mutate its first argument however it wants. All mutations are\r\n     * only ever applied to a __copy__ of the base state.\r\n     *\r\n     * Pass only a function to create a \"curried producer\" which relieves you\r\n     * from passing the recipe function every time.\r\n     *\r\n     * Only plain objects and arrays are made mutable. All other objects are\r\n     * considered uncopyable.\r\n     *\r\n     * Note: This function is __bound__ to its `Immer` instance.\r\n     *\r\n     * @param {any} base - the initial state\r\n     * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\r\n     * @param {Function} patchListener - optional function that will be called with all the patches produced here\r\n     * @returns {any} a new state, or the initial state if nothing was modified\r\n     */\r\n    this.produce = (base, recipe, patchListener) => {\r\n      if (typeof base === \"function\" && typeof recipe !== \"function\") {\r\n        const defaultBase = recipe;\r\n        recipe = base;\r\n        const self = this;\r\n        return function curriedProduce(base2 = defaultBase, ...args) {\r\n          return self.produce(base2, (draft) => recipe.call(this, draft, ...args));\r\n        };\r\n      }\r\n      if (typeof recipe !== \"function\")\r\n        die(6);\r\n      if (patchListener !== void 0 && typeof patchListener !== \"function\")\r\n        die(7);\r\n      let result;\r\n      if (isDraftable(base)) {\r\n        const scope = enterScope(this);\r\n        const proxy = createProxy(base, void 0);\r\n        let hasError = true;\r\n        try {\r\n          result = recipe(proxy);\r\n          hasError = false;\r\n        } finally {\r\n          if (hasError)\r\n            revokeScope(scope);\r\n          else\r\n            leaveScope(scope);\r\n        }\r\n        usePatchesInScope(scope, patchListener);\r\n        return processResult(result, scope);\r\n      } else if (!base || typeof base !== \"object\") {\r\n        result = recipe(base);\r\n        if (result === void 0)\r\n          result = base;\r\n        if (result === NOTHING)\r\n          result = void 0;\r\n        if (this.autoFreeze_)\r\n          freeze(result, true);\r\n        if (patchListener) {\r\n          const p = [];\r\n          const ip = [];\r\n          getPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip);\r\n          patchListener(p, ip);\r\n        }\r\n        return result;\r\n      } else\r\n        die(1, base);\r\n    };\r\n    this.produceWithPatches = (base, recipe) => {\r\n      if (typeof base === \"function\") {\r\n        return (state, ...args) => this.produceWithPatches(state, (draft) => base(draft, ...args));\r\n      }\r\n      let patches, inversePatches;\r\n      const result = this.produce(base, recipe, (p, ip) => {\r\n        patches = p;\r\n        inversePatches = ip;\r\n      });\r\n      return [result, patches, inversePatches];\r\n    };\r\n    if (typeof config?.autoFreeze === \"boolean\")\r\n      this.setAutoFreeze(config.autoFreeze);\r\n    if (typeof config?.useStrictShallowCopy === \"boolean\")\r\n      this.setUseStrictShallowCopy(config.useStrictShallowCopy);\r\n  }\r\n  createDraft(base) {\r\n    if (!isDraftable(base))\r\n      die(8);\r\n    if (isDraft(base))\r\n      base = current(base);\r\n    const scope = enterScope(this);\r\n    const proxy = createProxy(base, void 0);\r\n    proxy[DRAFT_STATE].isManual_ = true;\r\n    leaveScope(scope);\r\n    return proxy;\r\n  }\r\n  finishDraft(draft, patchListener) {\r\n    const state = draft && draft[DRAFT_STATE];\r\n    if (!state || !state.isManual_)\r\n      die(9);\r\n    const { scope_: scope } = state;\r\n    usePatchesInScope(scope, patchListener);\r\n    return processResult(void 0, scope);\r\n  }\r\n  /**\r\n   * Pass true to automatically freeze all copies created by Immer.\r\n   *\r\n   * By default, auto-freezing is enabled.\r\n   */\r\n  setAutoFreeze(value) {\r\n    this.autoFreeze_ = value;\r\n  }\r\n  /**\r\n   * Pass true to enable strict shallow copy.\r\n   *\r\n   * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\r\n   */\r\n  setUseStrictShallowCopy(value) {\r\n    this.useStrictShallowCopy_ = value;\r\n  }\r\n  applyPatches(base, patches) {\r\n    let i;\r\n    for (i = patches.length - 1; i >= 0; i--) {\r\n      const patch = patches[i];\r\n      if (patch.path.length === 0 && patch.op === \"replace\") {\r\n        base = patch.value;\r\n        break;\r\n      }\r\n    }\r\n    if (i > -1) {\r\n      patches = patches.slice(i + 1);\r\n    }\r\n    const applyPatchesImpl = getPlugin(\"Patches\").applyPatches_;\r\n    if (isDraft(base)) {\r\n      return applyPatchesImpl(base, patches);\r\n    }\r\n    return this.produce(\r\n      base,\r\n      (draft) => applyPatchesImpl(draft, patches)\r\n    );\r\n  }\r\n};\r\nfunction createProxy(value, parent) {\r\n  const draft = isMap(value) ? getPlugin(\"MapSet\").proxyMap_(value, parent) : isSet(value) ? getPlugin(\"MapSet\").proxySet_(value, parent) : createProxyProxy(value, parent);\r\n  const scope = parent ? parent.scope_ : getCurrentScope();\r\n  scope.drafts_.push(draft);\r\n  return draft;\r\n}\r\n\r\n// src/core/current.ts\r\nfunction current(value) {\r\n  if (!isDraft(value))\r\n    die(10, value);\r\n  return currentImpl(value);\r\n}\r\nfunction currentImpl(value) {\r\n  if (!isDraftable(value) || isFrozen(value))\r\n    return value;\r\n  const state = value[DRAFT_STATE];\r\n  let copy;\r\n  if (state) {\r\n    if (!state.modified_)\r\n      return state.base_;\r\n    state.finalized_ = true;\r\n    copy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_);\r\n  } else {\r\n    copy = shallowCopy(value, true);\r\n  }\r\n  each(copy, (key, childValue) => {\r\n    set(copy, key, currentImpl(childValue));\r\n  });\r\n  if (state) {\r\n    state.finalized_ = false;\r\n  }\r\n  return copy;\r\n}\r\n\r\n// src/plugins/patches.ts\r\nfunction enablePatches() {\r\n  const errorOffset = 16;\r\n  if (true) {\r\n    errors.push(\r\n      'Sets cannot have \"replace\" patches.',\r\n      function(op) {\r\n        return \"Unsupported patch operation: \" + op;\r\n      },\r\n      function(path) {\r\n        return \"Cannot apply patch, path doesn't resolve: \" + path;\r\n      },\r\n      \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\r\n    );\r\n  }\r\n  const REPLACE = \"replace\";\r\n  const ADD = \"add\";\r\n  const REMOVE = \"remove\";\r\n  function generatePatches_(state, basePath, patches, inversePatches) {\r\n    switch (state.type_) {\r\n      case 0 /* Object */:\r\n      case 2 /* Map */:\r\n        return generatePatchesFromAssigned(\r\n          state,\r\n          basePath,\r\n          patches,\r\n          inversePatches\r\n        );\r\n      case 1 /* Array */:\r\n        return generateArrayPatches(state, basePath, patches, inversePatches);\r\n      case 3 /* Set */:\r\n        return generateSetPatches(\r\n          state,\r\n          basePath,\r\n          patches,\r\n          inversePatches\r\n        );\r\n    }\r\n  }\r\n  function generateArrayPatches(state, basePath, patches, inversePatches) {\r\n    let { base_, assigned_ } = state;\r\n    let copy_ = state.copy_;\r\n    if (copy_.length < base_.length) {\r\n      ;\r\n      [base_, copy_] = [copy_, base_];\r\n      [patches, inversePatches] = [inversePatches, patches];\r\n    }\r\n    for (let i = 0; i < base_.length; i++) {\r\n      if (assigned_[i] && copy_[i] !== base_[i]) {\r\n        const path = basePath.concat([i]);\r\n        patches.push({\r\n          op: REPLACE,\r\n          path,\r\n          // Need to maybe clone it, as it can in fact be the original value\r\n          // due to the base/copy inversion at the start of this function\r\n          value: clonePatchValueIfNeeded(copy_[i])\r\n        });\r\n        inversePatches.push({\r\n          op: REPLACE,\r\n          path,\r\n          value: clonePatchValueIfNeeded(base_[i])\r\n        });\r\n      }\r\n    }\r\n    for (let i = base_.length; i < copy_.length; i++) {\r\n      const path = basePath.concat([i]);\r\n      patches.push({\r\n        op: ADD,\r\n        path,\r\n        // Need to maybe clone it, as it can in fact be the original value\r\n        // due to the base/copy inversion at the start of this function\r\n        value: clonePatchValueIfNeeded(copy_[i])\r\n      });\r\n    }\r\n    for (let i = copy_.length - 1; base_.length <= i; --i) {\r\n      const path = basePath.concat([i]);\r\n      inversePatches.push({\r\n        op: REMOVE,\r\n        path\r\n      });\r\n    }\r\n  }\r\n  function generatePatchesFromAssigned(state, basePath, patches, inversePatches) {\r\n    const { base_, copy_ } = state;\r\n    each(state.assigned_, (key, assignedValue) => {\r\n      const origValue = get(base_, key);\r\n      const value = get(copy_, key);\r\n      const op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD;\r\n      if (origValue === value && op === REPLACE)\r\n        return;\r\n      const path = basePath.concat(key);\r\n      patches.push(op === REMOVE ? { op, path } : { op, path, value });\r\n      inversePatches.push(\r\n        op === ADD ? { op: REMOVE, path } : op === REMOVE ? { op: ADD, path, value: clonePatchValueIfNeeded(origValue) } : { op: REPLACE, path, value: clonePatchValueIfNeeded(origValue) }\r\n      );\r\n    });\r\n  }\r\n  function generateSetPatches(state, basePath, patches, inversePatches) {\r\n    let { base_, copy_ } = state;\r\n    let i = 0;\r\n    base_.forEach((value) => {\r\n      if (!copy_.has(value)) {\r\n        const path = basePath.concat([i]);\r\n        patches.push({\r\n          op: REMOVE,\r\n          path,\r\n          value\r\n        });\r\n        inversePatches.unshift({\r\n          op: ADD,\r\n          path,\r\n          value\r\n        });\r\n      }\r\n      i++;\r\n    });\r\n    i = 0;\r\n    copy_.forEach((value) => {\r\n      if (!base_.has(value)) {\r\n        const path = basePath.concat([i]);\r\n        patches.push({\r\n          op: ADD,\r\n          path,\r\n          value\r\n        });\r\n        inversePatches.unshift({\r\n          op: REMOVE,\r\n          path,\r\n          value\r\n        });\r\n      }\r\n      i++;\r\n    });\r\n  }\r\n  function generateReplacementPatches_(baseValue, replacement, patches, inversePatches) {\r\n    patches.push({\r\n      op: REPLACE,\r\n      path: [],\r\n      value: replacement === NOTHING ? void 0 : replacement\r\n    });\r\n    inversePatches.push({\r\n      op: REPLACE,\r\n      path: [],\r\n      value: baseValue\r\n    });\r\n  }\r\n  function applyPatches_(draft, patches) {\r\n    patches.forEach((patch) => {\r\n      const { path, op } = patch;\r\n      let base = draft;\r\n      for (let i = 0; i < path.length - 1; i++) {\r\n        const parentType = getArchtype(base);\r\n        let p = path[i];\r\n        if (typeof p !== \"string\" && typeof p !== \"number\") {\r\n          p = \"\" + p;\r\n        }\r\n        if ((parentType === 0 /* Object */ || parentType === 1 /* Array */) && (p === \"__proto__\" || p === \"constructor\"))\r\n          die(errorOffset + 3);\r\n        if (typeof base === \"function\" && p === \"prototype\")\r\n          die(errorOffset + 3);\r\n        base = get(base, p);\r\n        if (typeof base !== \"object\")\r\n          die(errorOffset + 2, path.join(\"/\"));\r\n      }\r\n      const type = getArchtype(base);\r\n      const value = deepClonePatchValue(patch.value);\r\n      const key = path[path.length - 1];\r\n      switch (op) {\r\n        case REPLACE:\r\n          switch (type) {\r\n            case 2 /* Map */:\r\n              return base.set(key, value);\r\n            case 3 /* Set */:\r\n              die(errorOffset);\r\n            default:\r\n              return base[key] = value;\r\n          }\r\n        case ADD:\r\n          switch (type) {\r\n            case 1 /* Array */:\r\n              return key === \"-\" ? base.push(value) : base.splice(key, 0, value);\r\n            case 2 /* Map */:\r\n              return base.set(key, value);\r\n            case 3 /* Set */:\r\n              return base.add(value);\r\n            default:\r\n              return base[key] = value;\r\n          }\r\n        case REMOVE:\r\n          switch (type) {\r\n            case 1 /* Array */:\r\n              return base.splice(key, 1);\r\n            case 2 /* Map */:\r\n              return base.delete(key);\r\n            case 3 /* Set */:\r\n              return base.delete(patch.value);\r\n            default:\r\n              return delete base[key];\r\n          }\r\n        default:\r\n          die(errorOffset + 1, op);\r\n      }\r\n    });\r\n    return draft;\r\n  }\r\n  function deepClonePatchValue(obj) {\r\n    if (!isDraftable(obj))\r\n      return obj;\r\n    if (Array.isArray(obj))\r\n      return obj.map(deepClonePatchValue);\r\n    if (isMap(obj))\r\n      return new Map(\r\n        Array.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\r\n      );\r\n    if (isSet(obj))\r\n      return new Set(Array.from(obj).map(deepClonePatchValue));\r\n    const cloned = Object.create(getPrototypeOf(obj));\r\n    for (const key in obj)\r\n      cloned[key] = deepClonePatchValue(obj[key]);\r\n    if (has(obj, DRAFTABLE))\r\n      cloned[DRAFTABLE] = obj[DRAFTABLE];\r\n    return cloned;\r\n  }\r\n  function clonePatchValueIfNeeded(obj) {\r\n    if (isDraft(obj)) {\r\n      return deepClonePatchValue(obj);\r\n    } else\r\n      return obj;\r\n  }\r\n  loadPlugin(\"Patches\", {\r\n    applyPatches_,\r\n    generatePatches_,\r\n    generateReplacementPatches_\r\n  });\r\n}\r\n\r\n// src/plugins/mapset.ts\r\nfunction enableMapSet() {\r\n  class DraftMap extends Map {\r\n    constructor(target, parent) {\r\n      super();\r\n      this[DRAFT_STATE] = {\r\n        type_: 2 /* Map */,\r\n        parent_: parent,\r\n        scope_: parent ? parent.scope_ : getCurrentScope(),\r\n        modified_: false,\r\n        finalized_: false,\r\n        copy_: void 0,\r\n        assigned_: void 0,\r\n        base_: target,\r\n        draft_: this,\r\n        isManual_: false,\r\n        revoked_: false\r\n      };\r\n    }\r\n    get size() {\r\n      return latest(this[DRAFT_STATE]).size;\r\n    }\r\n    has(key) {\r\n      return latest(this[DRAFT_STATE]).has(key);\r\n    }\r\n    set(key, value) {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      if (!latest(state).has(key) || latest(state).get(key) !== value) {\r\n        prepareMapCopy(state);\r\n        markChanged(state);\r\n        state.assigned_.set(key, true);\r\n        state.copy_.set(key, value);\r\n        state.assigned_.set(key, true);\r\n      }\r\n      return this;\r\n    }\r\n    delete(key) {\r\n      if (!this.has(key)) {\r\n        return false;\r\n      }\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      prepareMapCopy(state);\r\n      markChanged(state);\r\n      if (state.base_.has(key)) {\r\n        state.assigned_.set(key, false);\r\n      } else {\r\n        state.assigned_.delete(key);\r\n      }\r\n      state.copy_.delete(key);\r\n      return true;\r\n    }\r\n    clear() {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      if (latest(state).size) {\r\n        prepareMapCopy(state);\r\n        markChanged(state);\r\n        state.assigned_ = /* @__PURE__ */ new Map();\r\n        each(state.base_, (key) => {\r\n          state.assigned_.set(key, false);\r\n        });\r\n        state.copy_.clear();\r\n      }\r\n    }\r\n    forEach(cb, thisArg) {\r\n      const state = this[DRAFT_STATE];\r\n      latest(state).forEach((_value, key, _map) => {\r\n        cb.call(thisArg, this.get(key), key, this);\r\n      });\r\n    }\r\n    get(key) {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      const value = latest(state).get(key);\r\n      if (state.finalized_ || !isDraftable(value)) {\r\n        return value;\r\n      }\r\n      if (value !== state.base_.get(key)) {\r\n        return value;\r\n      }\r\n      const draft = createProxy(value, state);\r\n      prepareMapCopy(state);\r\n      state.copy_.set(key, draft);\r\n      return draft;\r\n    }\r\n    keys() {\r\n      return latest(this[DRAFT_STATE]).keys();\r\n    }\r\n    values() {\r\n      const iterator = this.keys();\r\n      return {\r\n        [Symbol.iterator]: () => this.values(),\r\n        next: () => {\r\n          const r = iterator.next();\r\n          if (r.done)\r\n            return r;\r\n          const value = this.get(r.value);\r\n          return {\r\n            done: false,\r\n            value\r\n          };\r\n        }\r\n      };\r\n    }\r\n    entries() {\r\n      const iterator = this.keys();\r\n      return {\r\n        [Symbol.iterator]: () => this.entries(),\r\n        next: () => {\r\n          const r = iterator.next();\r\n          if (r.done)\r\n            return r;\r\n          const value = this.get(r.value);\r\n          return {\r\n            done: false,\r\n            value: [r.value, value]\r\n          };\r\n        }\r\n      };\r\n    }\r\n    [(DRAFT_STATE, Symbol.iterator)]() {\r\n      return this.entries();\r\n    }\r\n  }\r\n  function proxyMap_(target, parent) {\r\n    return new DraftMap(target, parent);\r\n  }\r\n  function prepareMapCopy(state) {\r\n    if (!state.copy_) {\r\n      state.assigned_ = /* @__PURE__ */ new Map();\r\n      state.copy_ = new Map(state.base_);\r\n    }\r\n  }\r\n  class DraftSet extends Set {\r\n    constructor(target, parent) {\r\n      super();\r\n      this[DRAFT_STATE] = {\r\n        type_: 3 /* Set */,\r\n        parent_: parent,\r\n        scope_: parent ? parent.scope_ : getCurrentScope(),\r\n        modified_: false,\r\n        finalized_: false,\r\n        copy_: void 0,\r\n        base_: target,\r\n        draft_: this,\r\n        drafts_: /* @__PURE__ */ new Map(),\r\n        revoked_: false,\r\n        isManual_: false\r\n      };\r\n    }\r\n    get size() {\r\n      return latest(this[DRAFT_STATE]).size;\r\n    }\r\n    has(value) {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      if (!state.copy_) {\r\n        return state.base_.has(value);\r\n      }\r\n      if (state.copy_.has(value))\r\n        return true;\r\n      if (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\r\n        return true;\r\n      return false;\r\n    }\r\n    add(value) {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      if (!this.has(value)) {\r\n        prepareSetCopy(state);\r\n        markChanged(state);\r\n        state.copy_.add(value);\r\n      }\r\n      return this;\r\n    }\r\n    delete(value) {\r\n      if (!this.has(value)) {\r\n        return false;\r\n      }\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      prepareSetCopy(state);\r\n      markChanged(state);\r\n      return state.copy_.delete(value) || (state.drafts_.has(value) ? state.copy_.delete(state.drafts_.get(value)) : (\r\n        /* istanbul ignore next */\r\n        false\r\n      ));\r\n    }\r\n    clear() {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      if (latest(state).size) {\r\n        prepareSetCopy(state);\r\n        markChanged(state);\r\n        state.copy_.clear();\r\n      }\r\n    }\r\n    values() {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      prepareSetCopy(state);\r\n      return state.copy_.values();\r\n    }\r\n    entries() {\r\n      const state = this[DRAFT_STATE];\r\n      assertUnrevoked(state);\r\n      prepareSetCopy(state);\r\n      return state.copy_.entries();\r\n    }\r\n    keys() {\r\n      return this.values();\r\n    }\r\n    [(DRAFT_STATE, Symbol.iterator)]() {\r\n      return this.values();\r\n    }\r\n    forEach(cb, thisArg) {\r\n      const iterator = this.values();\r\n      let result = iterator.next();\r\n      while (!result.done) {\r\n        cb.call(thisArg, result.value, result.value, this);\r\n        result = iterator.next();\r\n      }\r\n    }\r\n  }\r\n  function proxySet_(target, parent) {\r\n    return new DraftSet(target, parent);\r\n  }\r\n  function prepareSetCopy(state) {\r\n    if (!state.copy_) {\r\n      state.copy_ = /* @__PURE__ */ new Set();\r\n      state.base_.forEach((value) => {\r\n        if (isDraftable(value)) {\r\n          const draft = createProxy(value, state);\r\n          state.drafts_.set(value, draft);\r\n          state.copy_.add(draft);\r\n        } else {\r\n          state.copy_.add(value);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  function assertUnrevoked(state) {\r\n    if (state.revoked_)\r\n      die(3, JSON.stringify(latest(state)));\r\n  }\r\n  loadPlugin(\"MapSet\", { proxyMap_, proxySet_ });\r\n}\r\n\r\n// src/immer.ts\r\nvar immer = new Immer2();\r\nvar produce = immer.produce;\r\nvar produceWithPatches = immer.produceWithPatches.bind(\r\n  immer\r\n);\r\nvar setAutoFreeze = immer.setAutoFreeze.bind(immer);\r\nvar setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer);\r\nvar applyPatches = immer.applyPatches.bind(immer);\r\nvar createDraft = immer.createDraft.bind(immer);\r\nvar finishDraft = immer.finishDraft.bind(immer);\r\nfunction castDraft(value) {\r\n  return value;\r\n}\r\nfunction castImmutable(value) {\r\n  return value;\r\n}\r\n\r\n//# sourceMappingURL=immer.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/immer/dist/immer.mjs\n");

/***/ })

};
;