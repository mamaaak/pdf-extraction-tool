"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/reselect";
exports.ids = ["vendor-chunks/reselect"];
exports.modules = {

/***/ "(ssr)/./node_modules/reselect/dist/reselect.mjs":
/*!*************************************************!*\
  !*** ./node_modules/reselect/dist/reselect.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSelector: () => (/* binding */ createSelector),\n/* harmony export */   createSelectorCreator: () => (/* binding */ createSelectorCreator),\n/* harmony export */   createStructuredSelector: () => (/* binding */ createStructuredSelector),\n/* harmony export */   lruMemoize: () => (/* binding */ lruMemoize),\n/* harmony export */   referenceEqualityCheck: () => (/* binding */ referenceEqualityCheck),\n/* harmony export */   setGlobalDevModeChecks: () => (/* binding */ setGlobalDevModeChecks),\n/* harmony export */   unstable_autotrackMemoize: () => (/* binding */ autotrackMemoize),\n/* harmony export */   weakMapMemoize: () => (/* binding */ weakMapMemoize)\n/* harmony export */ });\n// src/devModeChecks/identityFunctionCheck.ts\r\nvar runIdentityFunctionCheck = (resultFunc, inputSelectorsResults, outputSelectorResult) => {\r\n  if (inputSelectorsResults.length === 1 && inputSelectorsResults[0] === outputSelectorResult) {\r\n    let isInputSameAsOutput = false;\r\n    try {\r\n      const emptyObject = {};\r\n      if (resultFunc(emptyObject) === emptyObject)\r\n        isInputSameAsOutput = true;\r\n    } catch {\r\n    }\r\n    if (isInputSameAsOutput) {\r\n      let stack = void 0;\r\n      try {\r\n        throw new Error();\r\n      } catch (e) {\r\n        ;\r\n        ({ stack } = e);\r\n      }\r\n      console.warn(\r\n        \"The result function returned its own inputs without modification. e.g\\n`createSelector([state => state.todos], todos => todos)`\\nThis could lead to inefficient memoization and unnecessary re-renders.\\nEnsure transformation logic is in the result function, and extraction logic is in the input selectors.\",\r\n        { stack }\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\n// src/devModeChecks/inputStabilityCheck.ts\r\nvar runInputStabilityCheck = (inputSelectorResultsObject, options, inputSelectorArgs) => {\r\n  const { memoize, memoizeOptions } = options;\r\n  const { inputSelectorResults, inputSelectorResultsCopy } = inputSelectorResultsObject;\r\n  const createAnEmptyObject = memoize(() => ({}), ...memoizeOptions);\r\n  const areInputSelectorResultsEqual = createAnEmptyObject.apply(null, inputSelectorResults) === createAnEmptyObject.apply(null, inputSelectorResultsCopy);\r\n  if (!areInputSelectorResultsEqual) {\r\n    let stack = void 0;\r\n    try {\r\n      throw new Error();\r\n    } catch (e) {\r\n      ;\r\n      ({ stack } = e);\r\n    }\r\n    console.warn(\r\n      \"An input selector returned a different result when passed same arguments.\\nThis means your output selector will likely run more frequently than intended.\\nAvoid returning a new reference inside your input selector, e.g.\\n`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)`\",\r\n      {\r\n        arguments: inputSelectorArgs,\r\n        firstInputs: inputSelectorResults,\r\n        secondInputs: inputSelectorResultsCopy,\r\n        stack\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n// src/devModeChecks/setGlobalDevModeChecks.ts\r\nvar globalDevModeChecks = {\r\n  inputStabilityCheck: \"once\",\r\n  identityFunctionCheck: \"once\"\r\n};\r\nvar setGlobalDevModeChecks = (devModeChecks) => {\r\n  Object.assign(globalDevModeChecks, devModeChecks);\r\n};\r\n\r\n// src/utils.ts\r\nvar NOT_FOUND = /* @__PURE__ */ Symbol(\"NOT_FOUND\");\r\nfunction assertIsFunction(func, errorMessage = `expected a function, instead received ${typeof func}`) {\r\n  if (typeof func !== \"function\") {\r\n    throw new TypeError(errorMessage);\r\n  }\r\n}\r\nfunction assertIsObject(object, errorMessage = `expected an object, instead received ${typeof object}`) {\r\n  if (typeof object !== \"object\") {\r\n    throw new TypeError(errorMessage);\r\n  }\r\n}\r\nfunction assertIsArrayOfFunctions(array, errorMessage = `expected all items to be functions, instead received the following types: `) {\r\n  if (!array.every((item) => typeof item === \"function\")) {\r\n    const itemTypes = array.map(\r\n      (item) => typeof item === \"function\" ? `function ${item.name || \"unnamed\"}()` : typeof item\r\n    ).join(\", \");\r\n    throw new TypeError(`${errorMessage}[${itemTypes}]`);\r\n  }\r\n}\r\nvar ensureIsArray = (item) => {\r\n  return Array.isArray(item) ? item : [item];\r\n};\r\nfunction getDependencies(createSelectorArgs) {\r\n  const dependencies = Array.isArray(createSelectorArgs[0]) ? createSelectorArgs[0] : createSelectorArgs;\r\n  assertIsArrayOfFunctions(\r\n    dependencies,\r\n    `createSelector expects all input-selectors to be functions, but received the following types: `\r\n  );\r\n  return dependencies;\r\n}\r\nfunction collectInputSelectorResults(dependencies, inputSelectorArgs) {\r\n  const inputSelectorResults = [];\r\n  const { length } = dependencies;\r\n  for (let i = 0; i < length; i++) {\r\n    inputSelectorResults.push(dependencies[i].apply(null, inputSelectorArgs));\r\n  }\r\n  return inputSelectorResults;\r\n}\r\nvar getDevModeChecksExecutionInfo = (firstRun, devModeChecks) => {\r\n  const { identityFunctionCheck, inputStabilityCheck } = {\r\n    ...globalDevModeChecks,\r\n    ...devModeChecks\r\n  };\r\n  return {\r\n    identityFunctionCheck: {\r\n      shouldRun: identityFunctionCheck === \"always\" || identityFunctionCheck === \"once\" && firstRun,\r\n      run: runIdentityFunctionCheck\r\n    },\r\n    inputStabilityCheck: {\r\n      shouldRun: inputStabilityCheck === \"always\" || inputStabilityCheck === \"once\" && firstRun,\r\n      run: runInputStabilityCheck\r\n    }\r\n  };\r\n};\r\n\r\n// src/autotrackMemoize/autotracking.ts\r\nvar $REVISION = 0;\r\nvar CURRENT_TRACKER = null;\r\nvar Cell = class {\r\n  revision = $REVISION;\r\n  _value;\r\n  _lastValue;\r\n  _isEqual = tripleEq;\r\n  constructor(initialValue, isEqual = tripleEq) {\r\n    this._value = this._lastValue = initialValue;\r\n    this._isEqual = isEqual;\r\n  }\r\n  // Whenever a storage value is read, it'll add itself to the current tracker if\r\n  // one exists, entangling its state with that cache.\r\n  get value() {\r\n    CURRENT_TRACKER?.add(this);\r\n    return this._value;\r\n  }\r\n  // Whenever a storage value is updated, we bump the global revision clock,\r\n  // assign the revision for this storage to the new value, _and_ we schedule a\r\n  // rerender. This is important, and it's what makes autotracking  _pull_\r\n  // based. We don't actively tell the caches which depend on the storage that\r\n  // anything has happened. Instead, we recompute the caches when needed.\r\n  set value(newValue) {\r\n    if (this.value === newValue)\r\n      return;\r\n    this._value = newValue;\r\n    this.revision = ++$REVISION;\r\n  }\r\n};\r\nfunction tripleEq(a, b) {\r\n  return a === b;\r\n}\r\nvar TrackingCache = class {\r\n  _cachedValue;\r\n  _cachedRevision = -1;\r\n  _deps = [];\r\n  hits = 0;\r\n  fn;\r\n  constructor(fn) {\r\n    this.fn = fn;\r\n  }\r\n  clear() {\r\n    this._cachedValue = void 0;\r\n    this._cachedRevision = -1;\r\n    this._deps = [];\r\n    this.hits = 0;\r\n  }\r\n  get value() {\r\n    if (this.revision > this._cachedRevision) {\r\n      const { fn } = this;\r\n      const currentTracker = /* @__PURE__ */ new Set();\r\n      const prevTracker = CURRENT_TRACKER;\r\n      CURRENT_TRACKER = currentTracker;\r\n      this._cachedValue = fn();\r\n      CURRENT_TRACKER = prevTracker;\r\n      this.hits++;\r\n      this._deps = Array.from(currentTracker);\r\n      this._cachedRevision = this.revision;\r\n    }\r\n    CURRENT_TRACKER?.add(this);\r\n    return this._cachedValue;\r\n  }\r\n  get revision() {\r\n    return Math.max(...this._deps.map((d) => d.revision), 0);\r\n  }\r\n};\r\nfunction getValue(cell) {\r\n  if (!(cell instanceof Cell)) {\r\n    console.warn(\"Not a valid cell! \", cell);\r\n  }\r\n  return cell.value;\r\n}\r\nfunction setValue(storage, value) {\r\n  if (!(storage instanceof Cell)) {\r\n    throw new TypeError(\r\n      \"setValue must be passed a tracked store created with `createStorage`.\"\r\n    );\r\n  }\r\n  storage.value = storage._lastValue = value;\r\n}\r\nfunction createCell(initialValue, isEqual = tripleEq) {\r\n  return new Cell(initialValue, isEqual);\r\n}\r\nfunction createCache(fn) {\r\n  assertIsFunction(\r\n    fn,\r\n    \"the first parameter to `createCache` must be a function\"\r\n  );\r\n  return new TrackingCache(fn);\r\n}\r\n\r\n// src/autotrackMemoize/tracking.ts\r\nvar neverEq = (a, b) => false;\r\nfunction createTag() {\r\n  return createCell(null, neverEq);\r\n}\r\nfunction dirtyTag(tag, value) {\r\n  setValue(tag, value);\r\n}\r\nvar consumeCollection = (node) => {\r\n  let tag = node.collectionTag;\r\n  if (tag === null) {\r\n    tag = node.collectionTag = createTag();\r\n  }\r\n  getValue(tag);\r\n};\r\nvar dirtyCollection = (node) => {\r\n  const tag = node.collectionTag;\r\n  if (tag !== null) {\r\n    dirtyTag(tag, null);\r\n  }\r\n};\r\n\r\n// src/autotrackMemoize/proxy.ts\r\nvar REDUX_PROXY_LABEL = Symbol();\r\nvar nextId = 0;\r\nvar proto = Object.getPrototypeOf({});\r\nvar ObjectTreeNode = class {\r\n  constructor(value) {\r\n    this.value = value;\r\n    this.value = value;\r\n    this.tag.value = value;\r\n  }\r\n  proxy = new Proxy(this, objectProxyHandler);\r\n  tag = createTag();\r\n  tags = {};\r\n  children = {};\r\n  collectionTag = null;\r\n  id = nextId++;\r\n};\r\nvar objectProxyHandler = {\r\n  get(node, key) {\r\n    function calculateResult() {\r\n      const { value } = node;\r\n      const childValue = Reflect.get(value, key);\r\n      if (typeof key === \"symbol\") {\r\n        return childValue;\r\n      }\r\n      if (key in proto) {\r\n        return childValue;\r\n      }\r\n      if (typeof childValue === \"object\" && childValue !== null) {\r\n        let childNode = node.children[key];\r\n        if (childNode === void 0) {\r\n          childNode = node.children[key] = createNode(childValue);\r\n        }\r\n        if (childNode.tag) {\r\n          getValue(childNode.tag);\r\n        }\r\n        return childNode.proxy;\r\n      } else {\r\n        let tag = node.tags[key];\r\n        if (tag === void 0) {\r\n          tag = node.tags[key] = createTag();\r\n          tag.value = childValue;\r\n        }\r\n        getValue(tag);\r\n        return childValue;\r\n      }\r\n    }\r\n    const res = calculateResult();\r\n    return res;\r\n  },\r\n  ownKeys(node) {\r\n    consumeCollection(node);\r\n    return Reflect.ownKeys(node.value);\r\n  },\r\n  getOwnPropertyDescriptor(node, prop) {\r\n    return Reflect.getOwnPropertyDescriptor(node.value, prop);\r\n  },\r\n  has(node, prop) {\r\n    return Reflect.has(node.value, prop);\r\n  }\r\n};\r\nvar ArrayTreeNode = class {\r\n  constructor(value) {\r\n    this.value = value;\r\n    this.value = value;\r\n    this.tag.value = value;\r\n  }\r\n  proxy = new Proxy([this], arrayProxyHandler);\r\n  tag = createTag();\r\n  tags = {};\r\n  children = {};\r\n  collectionTag = null;\r\n  id = nextId++;\r\n};\r\nvar arrayProxyHandler = {\r\n  get([node], key) {\r\n    if (key === \"length\") {\r\n      consumeCollection(node);\r\n    }\r\n    return objectProxyHandler.get(node, key);\r\n  },\r\n  ownKeys([node]) {\r\n    return objectProxyHandler.ownKeys(node);\r\n  },\r\n  getOwnPropertyDescriptor([node], prop) {\r\n    return objectProxyHandler.getOwnPropertyDescriptor(node, prop);\r\n  },\r\n  has([node], prop) {\r\n    return objectProxyHandler.has(node, prop);\r\n  }\r\n};\r\nfunction createNode(value) {\r\n  if (Array.isArray(value)) {\r\n    return new ArrayTreeNode(value);\r\n  }\r\n  return new ObjectTreeNode(value);\r\n}\r\nfunction updateNode(node, newValue) {\r\n  const { value, tags, children } = node;\r\n  node.value = newValue;\r\n  if (Array.isArray(value) && Array.isArray(newValue) && value.length !== newValue.length) {\r\n    dirtyCollection(node);\r\n  } else {\r\n    if (value !== newValue) {\r\n      let oldKeysSize = 0;\r\n      let newKeysSize = 0;\r\n      let anyKeysAdded = false;\r\n      for (const _key in value) {\r\n        oldKeysSize++;\r\n      }\r\n      for (const key in newValue) {\r\n        newKeysSize++;\r\n        if (!(key in value)) {\r\n          anyKeysAdded = true;\r\n          break;\r\n        }\r\n      }\r\n      const isDifferent = anyKeysAdded || oldKeysSize !== newKeysSize;\r\n      if (isDifferent) {\r\n        dirtyCollection(node);\r\n      }\r\n    }\r\n  }\r\n  for (const key in tags) {\r\n    const childValue = value[key];\r\n    const newChildValue = newValue[key];\r\n    if (childValue !== newChildValue) {\r\n      dirtyCollection(node);\r\n      dirtyTag(tags[key], newChildValue);\r\n    }\r\n    if (typeof newChildValue === \"object\" && newChildValue !== null) {\r\n      delete tags[key];\r\n    }\r\n  }\r\n  for (const key in children) {\r\n    const childNode = children[key];\r\n    const newChildValue = newValue[key];\r\n    const childValue = childNode.value;\r\n    if (childValue === newChildValue) {\r\n      continue;\r\n    } else if (typeof newChildValue === \"object\" && newChildValue !== null) {\r\n      updateNode(childNode, newChildValue);\r\n    } else {\r\n      deleteNode(childNode);\r\n      delete children[key];\r\n    }\r\n  }\r\n}\r\nfunction deleteNode(node) {\r\n  if (node.tag) {\r\n    dirtyTag(node.tag, null);\r\n  }\r\n  dirtyCollection(node);\r\n  for (const key in node.tags) {\r\n    dirtyTag(node.tags[key], null);\r\n  }\r\n  for (const key in node.children) {\r\n    deleteNode(node.children[key]);\r\n  }\r\n}\r\n\r\n// src/lruMemoize.ts\r\nfunction createSingletonCache(equals) {\r\n  let entry;\r\n  return {\r\n    get(key) {\r\n      if (entry && equals(entry.key, key)) {\r\n        return entry.value;\r\n      }\r\n      return NOT_FOUND;\r\n    },\r\n    put(key, value) {\r\n      entry = { key, value };\r\n    },\r\n    getEntries() {\r\n      return entry ? [entry] : [];\r\n    },\r\n    clear() {\r\n      entry = void 0;\r\n    }\r\n  };\r\n}\r\nfunction createLruCache(maxSize, equals) {\r\n  let entries = [];\r\n  function get(key) {\r\n    const cacheIndex = entries.findIndex((entry) => equals(key, entry.key));\r\n    if (cacheIndex > -1) {\r\n      const entry = entries[cacheIndex];\r\n      if (cacheIndex > 0) {\r\n        entries.splice(cacheIndex, 1);\r\n        entries.unshift(entry);\r\n      }\r\n      return entry.value;\r\n    }\r\n    return NOT_FOUND;\r\n  }\r\n  function put(key, value) {\r\n    if (get(key) === NOT_FOUND) {\r\n      entries.unshift({ key, value });\r\n      if (entries.length > maxSize) {\r\n        entries.pop();\r\n      }\r\n    }\r\n  }\r\n  function getEntries() {\r\n    return entries;\r\n  }\r\n  function clear() {\r\n    entries = [];\r\n  }\r\n  return { get, put, getEntries, clear };\r\n}\r\nvar referenceEqualityCheck = (a, b) => a === b;\r\nfunction createCacheKeyComparator(equalityCheck) {\r\n  return function areArgumentsShallowlyEqual(prev, next) {\r\n    if (prev === null || next === null || prev.length !== next.length) {\r\n      return false;\r\n    }\r\n    const { length } = prev;\r\n    for (let i = 0; i < length; i++) {\r\n      if (!equalityCheck(prev[i], next[i])) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n}\r\nfunction lruMemoize(func, equalityCheckOrOptions) {\r\n  const providedOptions = typeof equalityCheckOrOptions === \"object\" ? equalityCheckOrOptions : { equalityCheck: equalityCheckOrOptions };\r\n  const {\r\n    equalityCheck = referenceEqualityCheck,\r\n    maxSize = 1,\r\n    resultEqualityCheck\r\n  } = providedOptions;\r\n  const comparator = createCacheKeyComparator(equalityCheck);\r\n  let resultsCount = 0;\r\n  const cache = maxSize <= 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator);\r\n  function memoized() {\r\n    let value = cache.get(arguments);\r\n    if (value === NOT_FOUND) {\r\n      value = func.apply(null, arguments);\r\n      resultsCount++;\r\n      if (resultEqualityCheck) {\r\n        const entries = cache.getEntries();\r\n        const matchingEntry = entries.find(\r\n          (entry) => resultEqualityCheck(entry.value, value)\r\n        );\r\n        if (matchingEntry) {\r\n          value = matchingEntry.value;\r\n          resultsCount !== 0 && resultsCount--;\r\n        }\r\n      }\r\n      cache.put(arguments, value);\r\n    }\r\n    return value;\r\n  }\r\n  memoized.clearCache = () => {\r\n    cache.clear();\r\n    memoized.resetResultsCount();\r\n  };\r\n  memoized.resultsCount = () => resultsCount;\r\n  memoized.resetResultsCount = () => {\r\n    resultsCount = 0;\r\n  };\r\n  return memoized;\r\n}\r\n\r\n// src/autotrackMemoize/autotrackMemoize.ts\r\nfunction autotrackMemoize(func) {\r\n  const node = createNode(\r\n    []\r\n  );\r\n  let lastArgs = null;\r\n  const shallowEqual = createCacheKeyComparator(referenceEqualityCheck);\r\n  const cache = createCache(() => {\r\n    const res = func.apply(null, node.proxy);\r\n    return res;\r\n  });\r\n  function memoized() {\r\n    if (!shallowEqual(lastArgs, arguments)) {\r\n      updateNode(node, arguments);\r\n      lastArgs = arguments;\r\n    }\r\n    return cache.value;\r\n  }\r\n  memoized.clearCache = () => {\r\n    return cache.clear();\r\n  };\r\n  return memoized;\r\n}\r\n\r\n// src/weakMapMemoize.ts\r\nvar StrongRef = class {\r\n  constructor(value) {\r\n    this.value = value;\r\n  }\r\n  deref() {\r\n    return this.value;\r\n  }\r\n};\r\nvar Ref = typeof WeakRef !== \"undefined\" ? WeakRef : StrongRef;\r\nvar UNTERMINATED = 0;\r\nvar TERMINATED = 1;\r\nfunction createCacheNode() {\r\n  return {\r\n    s: UNTERMINATED,\r\n    v: void 0,\r\n    o: null,\r\n    p: null\r\n  };\r\n}\r\nfunction weakMapMemoize(func, options = {}) {\r\n  let fnNode = createCacheNode();\r\n  const { resultEqualityCheck } = options;\r\n  let lastResult;\r\n  let resultsCount = 0;\r\n  function memoized() {\r\n    let cacheNode = fnNode;\r\n    const { length } = arguments;\r\n    for (let i = 0, l = length; i < l; i++) {\r\n      const arg = arguments[i];\r\n      if (typeof arg === \"function\" || typeof arg === \"object\" && arg !== null) {\r\n        let objectCache = cacheNode.o;\r\n        if (objectCache === null) {\r\n          cacheNode.o = objectCache = /* @__PURE__ */ new WeakMap();\r\n        }\r\n        const objectNode = objectCache.get(arg);\r\n        if (objectNode === void 0) {\r\n          cacheNode = createCacheNode();\r\n          objectCache.set(arg, cacheNode);\r\n        } else {\r\n          cacheNode = objectNode;\r\n        }\r\n      } else {\r\n        let primitiveCache = cacheNode.p;\r\n        if (primitiveCache === null) {\r\n          cacheNode.p = primitiveCache = /* @__PURE__ */ new Map();\r\n        }\r\n        const primitiveNode = primitiveCache.get(arg);\r\n        if (primitiveNode === void 0) {\r\n          cacheNode = createCacheNode();\r\n          primitiveCache.set(arg, cacheNode);\r\n        } else {\r\n          cacheNode = primitiveNode;\r\n        }\r\n      }\r\n    }\r\n    const terminatedNode = cacheNode;\r\n    let result;\r\n    if (cacheNode.s === TERMINATED) {\r\n      result = cacheNode.v;\r\n    } else {\r\n      result = func.apply(null, arguments);\r\n      resultsCount++;\r\n      if (resultEqualityCheck) {\r\n        const lastResultValue = lastResult?.deref?.() ?? lastResult;\r\n        if (lastResultValue != null && resultEqualityCheck(lastResultValue, result)) {\r\n          result = lastResultValue;\r\n          resultsCount !== 0 && resultsCount--;\r\n        }\r\n        const needsWeakRef = typeof result === \"object\" && result !== null || typeof result === \"function\";\r\n        lastResult = needsWeakRef ? new Ref(result) : result;\r\n      }\r\n    }\r\n    terminatedNode.s = TERMINATED;\r\n    terminatedNode.v = result;\r\n    return result;\r\n  }\r\n  memoized.clearCache = () => {\r\n    fnNode = createCacheNode();\r\n    memoized.resetResultsCount();\r\n  };\r\n  memoized.resultsCount = () => resultsCount;\r\n  memoized.resetResultsCount = () => {\r\n    resultsCount = 0;\r\n  };\r\n  return memoized;\r\n}\r\n\r\n// src/createSelectorCreator.ts\r\nfunction createSelectorCreator(memoizeOrOptions, ...memoizeOptionsFromArgs) {\r\n  const createSelectorCreatorOptions = typeof memoizeOrOptions === \"function\" ? {\r\n    memoize: memoizeOrOptions,\r\n    memoizeOptions: memoizeOptionsFromArgs\r\n  } : memoizeOrOptions;\r\n  const createSelector2 = (...createSelectorArgs) => {\r\n    let recomputations = 0;\r\n    let dependencyRecomputations = 0;\r\n    let lastResult;\r\n    let directlyPassedOptions = {};\r\n    let resultFunc = createSelectorArgs.pop();\r\n    if (typeof resultFunc === \"object\") {\r\n      directlyPassedOptions = resultFunc;\r\n      resultFunc = createSelectorArgs.pop();\r\n    }\r\n    assertIsFunction(\r\n      resultFunc,\r\n      `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`\r\n    );\r\n    const combinedOptions = {\r\n      ...createSelectorCreatorOptions,\r\n      ...directlyPassedOptions\r\n    };\r\n    const {\r\n      memoize,\r\n      memoizeOptions = [],\r\n      argsMemoize = weakMapMemoize,\r\n      argsMemoizeOptions = [],\r\n      devModeChecks = {}\r\n    } = combinedOptions;\r\n    const finalMemoizeOptions = ensureIsArray(memoizeOptions);\r\n    const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions);\r\n    const dependencies = getDependencies(createSelectorArgs);\r\n    const memoizedResultFunc = memoize(function recomputationWrapper() {\r\n      recomputations++;\r\n      return resultFunc.apply(\r\n        null,\r\n        arguments\r\n      );\r\n    }, ...finalMemoizeOptions);\r\n    let firstRun = true;\r\n    const selector = argsMemoize(function dependenciesChecker() {\r\n      dependencyRecomputations++;\r\n      const inputSelectorResults = collectInputSelectorResults(\r\n        dependencies,\r\n        arguments\r\n      );\r\n      lastResult = memoizedResultFunc.apply(null, inputSelectorResults);\r\n      if (true) {\r\n        const { identityFunctionCheck, inputStabilityCheck } = getDevModeChecksExecutionInfo(firstRun, devModeChecks);\r\n        if (identityFunctionCheck.shouldRun) {\r\n          identityFunctionCheck.run(\r\n            resultFunc,\r\n            inputSelectorResults,\r\n            lastResult\r\n          );\r\n        }\r\n        if (inputStabilityCheck.shouldRun) {\r\n          const inputSelectorResultsCopy = collectInputSelectorResults(\r\n            dependencies,\r\n            arguments\r\n          );\r\n          inputStabilityCheck.run(\r\n            { inputSelectorResults, inputSelectorResultsCopy },\r\n            { memoize, memoizeOptions: finalMemoizeOptions },\r\n            arguments\r\n          );\r\n        }\r\n        if (firstRun)\r\n          firstRun = false;\r\n      }\r\n      return lastResult;\r\n    }, ...finalArgsMemoizeOptions);\r\n    return Object.assign(selector, {\r\n      resultFunc,\r\n      memoizedResultFunc,\r\n      dependencies,\r\n      dependencyRecomputations: () => dependencyRecomputations,\r\n      resetDependencyRecomputations: () => {\r\n        dependencyRecomputations = 0;\r\n      },\r\n      lastResult: () => lastResult,\r\n      recomputations: () => recomputations,\r\n      resetRecomputations: () => {\r\n        recomputations = 0;\r\n      },\r\n      memoize,\r\n      argsMemoize\r\n    });\r\n  };\r\n  Object.assign(createSelector2, {\r\n    withTypes: () => createSelector2\r\n  });\r\n  return createSelector2;\r\n}\r\nvar createSelector = /* @__PURE__ */ createSelectorCreator(weakMapMemoize);\r\n\r\n// src/createStructuredSelector.ts\r\nvar createStructuredSelector = Object.assign(\r\n  (inputSelectorsObject, selectorCreator = createSelector) => {\r\n    assertIsObject(\r\n      inputSelectorsObject,\r\n      `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof inputSelectorsObject}`\r\n    );\r\n    const inputSelectorKeys = Object.keys(inputSelectorsObject);\r\n    const dependencies = inputSelectorKeys.map(\r\n      (key) => inputSelectorsObject[key]\r\n    );\r\n    const structuredSelector = selectorCreator(\r\n      dependencies,\r\n      (...inputSelectorResults) => {\r\n        return inputSelectorResults.reduce((composition, value, index) => {\r\n          composition[inputSelectorKeys[index]] = value;\r\n          return composition;\r\n        }, {});\r\n      }\r\n    );\r\n    return structuredSelector;\r\n  },\r\n  { withTypes: () => createStructuredSelector }\r\n);\r\n\r\n//# sourceMappingURL=reselect.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/reselect/dist/reselect.mjs\n");

/***/ })

};
;