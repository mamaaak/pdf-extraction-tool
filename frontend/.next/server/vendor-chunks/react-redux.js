"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-redux";
exports.ids = ["vendor-chunks/react-redux"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-redux/dist/react-redux.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/react-redux/dist/react-redux.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Provider: () => (/* binding */ Provider_default),\n/* harmony export */   ReactReduxContext: () => (/* binding */ ReactReduxContext),\n/* harmony export */   batch: () => (/* binding */ batch),\n/* harmony export */   connect: () => (/* binding */ connect_default),\n/* harmony export */   createDispatchHook: () => (/* binding */ createDispatchHook),\n/* harmony export */   createSelectorHook: () => (/* binding */ createSelectorHook),\n/* harmony export */   createStoreHook: () => (/* binding */ createStoreHook),\n/* harmony export */   shallowEqual: () => (/* binding */ shallowEqual),\n/* harmony export */   useDispatch: () => (/* binding */ useDispatch),\n/* harmony export */   useSelector: () => (/* binding */ useSelector),\n/* harmony export */   useStore: () => (/* binding */ useStore)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var use_sync_external_store_with_selector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! use-sync-external-store/with-selector.js */ \"(ssr)/./node_modules/use-sync-external-store/with-selector.js\");\n// src/utils/react.ts\r\n\r\n\r\n// src/utils/react-is.ts\r\nvar IS_REACT_19 = /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.version.startsWith(\"19\");\r\nvar REACT_ELEMENT_TYPE = /* @__PURE__ */ Symbol.for(\r\n  IS_REACT_19 ? \"react.transitional.element\" : \"react.element\"\r\n);\r\nvar REACT_PORTAL_TYPE = /* @__PURE__ */ Symbol.for(\"react.portal\");\r\nvar REACT_FRAGMENT_TYPE = /* @__PURE__ */ Symbol.for(\"react.fragment\");\r\nvar REACT_STRICT_MODE_TYPE = /* @__PURE__ */ Symbol.for(\"react.strict_mode\");\r\nvar REACT_PROFILER_TYPE = /* @__PURE__ */ Symbol.for(\"react.profiler\");\r\nvar REACT_CONSUMER_TYPE = /* @__PURE__ */ Symbol.for(\"react.consumer\");\r\nvar REACT_CONTEXT_TYPE = /* @__PURE__ */ Symbol.for(\"react.context\");\r\nvar REACT_FORWARD_REF_TYPE = /* @__PURE__ */ Symbol.for(\"react.forward_ref\");\r\nvar REACT_SUSPENSE_TYPE = /* @__PURE__ */ Symbol.for(\"react.suspense\");\r\nvar REACT_SUSPENSE_LIST_TYPE = /* @__PURE__ */ Symbol.for(\r\n  \"react.suspense_list\"\r\n);\r\nvar REACT_MEMO_TYPE = /* @__PURE__ */ Symbol.for(\"react.memo\");\r\nvar REACT_LAZY_TYPE = /* @__PURE__ */ Symbol.for(\"react.lazy\");\r\nvar REACT_OFFSCREEN_TYPE = /* @__PURE__ */ Symbol.for(\"react.offscreen\");\r\nvar REACT_CLIENT_REFERENCE = /* @__PURE__ */ Symbol.for(\r\n  \"react.client.reference\"\r\n);\r\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\r\nvar Memo = REACT_MEMO_TYPE;\r\nfunction isValidElementType(type) {\r\n  return typeof type === \"string\" || typeof type === \"function\" || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || typeof type === \"object\" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE || type.getModuleId !== void 0) ? true : false;\r\n}\r\nfunction typeOf(object) {\r\n  if (typeof object === \"object\" && object !== null) {\r\n    const { $$typeof } = object;\r\n    switch ($$typeof) {\r\n      case REACT_ELEMENT_TYPE:\r\n        switch (object = object.type, object) {\r\n          case REACT_FRAGMENT_TYPE:\r\n          case REACT_PROFILER_TYPE:\r\n          case REACT_STRICT_MODE_TYPE:\r\n          case REACT_SUSPENSE_TYPE:\r\n          case REACT_SUSPENSE_LIST_TYPE:\r\n            return object;\r\n          default:\r\n            switch (object = object && object.$$typeof, object) {\r\n              case REACT_CONTEXT_TYPE:\r\n              case REACT_FORWARD_REF_TYPE:\r\n              case REACT_LAZY_TYPE:\r\n              case REACT_MEMO_TYPE:\r\n                return object;\r\n              case REACT_CONSUMER_TYPE:\r\n                return object;\r\n              default:\r\n                return $$typeof;\r\n            }\r\n        }\r\n      case REACT_PORTAL_TYPE:\r\n        return $$typeof;\r\n    }\r\n  }\r\n}\r\nfunction isContextConsumer(object) {\r\n  return IS_REACT_19 ? typeOf(object) === REACT_CONSUMER_TYPE : typeOf(object) === REACT_CONTEXT_TYPE;\r\n}\r\nfunction isMemo(object) {\r\n  return typeOf(object) === REACT_MEMO_TYPE;\r\n}\r\n\r\n// src/utils/warning.ts\r\nfunction warning(message) {\r\n  if (typeof console !== \"undefined\" && typeof console.error === \"function\") {\r\n    console.error(message);\r\n  }\r\n  try {\r\n    throw new Error(message);\r\n  } catch (e) {\r\n  }\r\n}\r\n\r\n// src/connect/verifySubselectors.ts\r\nfunction verify(selector, methodName) {\r\n  if (!selector) {\r\n    throw new Error(`Unexpected value for ${methodName} in connect.`);\r\n  } else if (methodName === \"mapStateToProps\" || methodName === \"mapDispatchToProps\") {\r\n    if (!Object.prototype.hasOwnProperty.call(selector, \"dependsOnOwnProps\")) {\r\n      warning(\r\n        `The selector for ${methodName} of connect did not specify a value for dependsOnOwnProps.`\r\n      );\r\n    }\r\n  }\r\n}\r\nfunction verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps) {\r\n  verify(mapStateToProps, \"mapStateToProps\");\r\n  verify(mapDispatchToProps, \"mapDispatchToProps\");\r\n  verify(mergeProps, \"mergeProps\");\r\n}\r\n\r\n// src/connect/selectorFactory.ts\r\nfunction pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, {\r\n  areStatesEqual,\r\n  areOwnPropsEqual,\r\n  areStatePropsEqual\r\n}) {\r\n  let hasRunAtLeastOnce = false;\r\n  let state;\r\n  let ownProps;\r\n  let stateProps;\r\n  let dispatchProps;\r\n  let mergedProps;\r\n  function handleFirstCall(firstState, firstOwnProps) {\r\n    state = firstState;\r\n    ownProps = firstOwnProps;\r\n    stateProps = mapStateToProps(state, ownProps);\r\n    dispatchProps = mapDispatchToProps(dispatch, ownProps);\r\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\r\n    hasRunAtLeastOnce = true;\r\n    return mergedProps;\r\n  }\r\n  function handleNewPropsAndNewState() {\r\n    stateProps = mapStateToProps(state, ownProps);\r\n    if (mapDispatchToProps.dependsOnOwnProps)\r\n      dispatchProps = mapDispatchToProps(dispatch, ownProps);\r\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\r\n    return mergedProps;\r\n  }\r\n  function handleNewProps() {\r\n    if (mapStateToProps.dependsOnOwnProps)\r\n      stateProps = mapStateToProps(state, ownProps);\r\n    if (mapDispatchToProps.dependsOnOwnProps)\r\n      dispatchProps = mapDispatchToProps(dispatch, ownProps);\r\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\r\n    return mergedProps;\r\n  }\r\n  function handleNewState() {\r\n    const nextStateProps = mapStateToProps(state, ownProps);\r\n    const statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);\r\n    stateProps = nextStateProps;\r\n    if (statePropsChanged)\r\n      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\r\n    return mergedProps;\r\n  }\r\n  function handleSubsequentCalls(nextState, nextOwnProps) {\r\n    const propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);\r\n    const stateChanged = !areStatesEqual(\r\n      nextState,\r\n      state,\r\n      nextOwnProps,\r\n      ownProps\r\n    );\r\n    state = nextState;\r\n    ownProps = nextOwnProps;\r\n    if (propsChanged && stateChanged) return handleNewPropsAndNewState();\r\n    if (propsChanged) return handleNewProps();\r\n    if (stateChanged) return handleNewState();\r\n    return mergedProps;\r\n  }\r\n  return function pureFinalPropsSelector(nextState, nextOwnProps) {\r\n    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);\r\n  };\r\n}\r\nfunction finalPropsSelectorFactory(dispatch, {\r\n  initMapStateToProps,\r\n  initMapDispatchToProps,\r\n  initMergeProps,\r\n  ...options\r\n}) {\r\n  const mapStateToProps = initMapStateToProps(dispatch, options);\r\n  const mapDispatchToProps = initMapDispatchToProps(dispatch, options);\r\n  const mergeProps = initMergeProps(dispatch, options);\r\n  if (true) {\r\n    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps);\r\n  }\r\n  return pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);\r\n}\r\n\r\n// src/utils/bindActionCreators.ts\r\nfunction bindActionCreators(actionCreators, dispatch) {\r\n  const boundActionCreators = {};\r\n  for (const key in actionCreators) {\r\n    const actionCreator = actionCreators[key];\r\n    if (typeof actionCreator === \"function\") {\r\n      boundActionCreators[key] = (...args) => dispatch(actionCreator(...args));\r\n    }\r\n  }\r\n  return boundActionCreators;\r\n}\r\n\r\n// src/utils/isPlainObject.ts\r\nfunction isPlainObject(obj) {\r\n  if (typeof obj !== \"object\" || obj === null) return false;\r\n  const proto = Object.getPrototypeOf(obj);\r\n  if (proto === null) return true;\r\n  let baseProto = proto;\r\n  while (Object.getPrototypeOf(baseProto) !== null) {\r\n    baseProto = Object.getPrototypeOf(baseProto);\r\n  }\r\n  return proto === baseProto;\r\n}\r\n\r\n// src/utils/verifyPlainObject.ts\r\nfunction verifyPlainObject(value, displayName, methodName) {\r\n  if (!isPlainObject(value)) {\r\n    warning(\r\n      `${methodName}() in ${displayName} must return a plain object. Instead received ${value}.`\r\n    );\r\n  }\r\n}\r\n\r\n// src/connect/wrapMapToProps.ts\r\nfunction wrapMapToPropsConstant(getConstant) {\r\n  return function initConstantSelector(dispatch) {\r\n    const constant = getConstant(dispatch);\r\n    function constantSelector() {\r\n      return constant;\r\n    }\r\n    constantSelector.dependsOnOwnProps = false;\r\n    return constantSelector;\r\n  };\r\n}\r\nfunction getDependsOnOwnProps(mapToProps) {\r\n  return mapToProps.dependsOnOwnProps ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;\r\n}\r\nfunction wrapMapToPropsFunc(mapToProps, methodName) {\r\n  return function initProxySelector(dispatch, { displayName }) {\r\n    const proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {\r\n      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch, void 0);\r\n    };\r\n    proxy.dependsOnOwnProps = true;\r\n    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {\r\n      proxy.mapToProps = mapToProps;\r\n      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);\r\n      let props = proxy(stateOrDispatch, ownProps);\r\n      if (typeof props === \"function\") {\r\n        proxy.mapToProps = props;\r\n        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);\r\n        props = proxy(stateOrDispatch, ownProps);\r\n      }\r\n      if (true)\r\n        verifyPlainObject(props, displayName, methodName);\r\n      return props;\r\n    };\r\n    return proxy;\r\n  };\r\n}\r\n\r\n// src/connect/invalidArgFactory.ts\r\nfunction createInvalidArgFactory(arg, name) {\r\n  return (dispatch, options) => {\r\n    throw new Error(\r\n      `Invalid value of type ${typeof arg} for ${name} argument when connecting component ${options.wrappedComponentName}.`\r\n    );\r\n  };\r\n}\r\n\r\n// src/connect/mapDispatchToProps.ts\r\nfunction mapDispatchToPropsFactory(mapDispatchToProps) {\r\n  return mapDispatchToProps && typeof mapDispatchToProps === \"object\" ? wrapMapToPropsConstant(\r\n    (dispatch) => (\r\n      // @ts-ignore\r\n      bindActionCreators(mapDispatchToProps, dispatch)\r\n    )\r\n  ) : !mapDispatchToProps ? wrapMapToPropsConstant((dispatch) => ({\r\n    dispatch\r\n  })) : typeof mapDispatchToProps === \"function\" ? (\r\n    // @ts-ignore\r\n    wrapMapToPropsFunc(mapDispatchToProps, \"mapDispatchToProps\")\r\n  ) : createInvalidArgFactory(mapDispatchToProps, \"mapDispatchToProps\");\r\n}\r\n\r\n// src/connect/mapStateToProps.ts\r\nfunction mapStateToPropsFactory(mapStateToProps) {\r\n  return !mapStateToProps ? wrapMapToPropsConstant(() => ({})) : typeof mapStateToProps === \"function\" ? (\r\n    // @ts-ignore\r\n    wrapMapToPropsFunc(mapStateToProps, \"mapStateToProps\")\r\n  ) : createInvalidArgFactory(mapStateToProps, \"mapStateToProps\");\r\n}\r\n\r\n// src/connect/mergeProps.ts\r\nfunction defaultMergeProps(stateProps, dispatchProps, ownProps) {\r\n  return { ...ownProps, ...stateProps, ...dispatchProps };\r\n}\r\nfunction wrapMergePropsFunc(mergeProps) {\r\n  return function initMergePropsProxy(dispatch, { displayName, areMergedPropsEqual }) {\r\n    let hasRunOnce = false;\r\n    let mergedProps;\r\n    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {\r\n      const nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);\r\n      if (hasRunOnce) {\r\n        if (!areMergedPropsEqual(nextMergedProps, mergedProps))\r\n          mergedProps = nextMergedProps;\r\n      } else {\r\n        hasRunOnce = true;\r\n        mergedProps = nextMergedProps;\r\n        if (true)\r\n          verifyPlainObject(mergedProps, displayName, \"mergeProps\");\r\n      }\r\n      return mergedProps;\r\n    };\r\n  };\r\n}\r\nfunction mergePropsFactory(mergeProps) {\r\n  return !mergeProps ? () => defaultMergeProps : typeof mergeProps === \"function\" ? wrapMergePropsFunc(mergeProps) : createInvalidArgFactory(mergeProps, \"mergeProps\");\r\n}\r\n\r\n// src/utils/batch.ts\r\nfunction defaultNoopBatch(callback) {\r\n  callback();\r\n}\r\n\r\n// src/utils/Subscription.ts\r\nfunction createListenerCollection() {\r\n  let first = null;\r\n  let last = null;\r\n  return {\r\n    clear() {\r\n      first = null;\r\n      last = null;\r\n    },\r\n    notify() {\r\n      defaultNoopBatch(() => {\r\n        let listener = first;\r\n        while (listener) {\r\n          listener.callback();\r\n          listener = listener.next;\r\n        }\r\n      });\r\n    },\r\n    get() {\r\n      const listeners = [];\r\n      let listener = first;\r\n      while (listener) {\r\n        listeners.push(listener);\r\n        listener = listener.next;\r\n      }\r\n      return listeners;\r\n    },\r\n    subscribe(callback) {\r\n      let isSubscribed = true;\r\n      const listener = last = {\r\n        callback,\r\n        next: null,\r\n        prev: last\r\n      };\r\n      if (listener.prev) {\r\n        listener.prev.next = listener;\r\n      } else {\r\n        first = listener;\r\n      }\r\n      return function unsubscribe() {\r\n        if (!isSubscribed || first === null) return;\r\n        isSubscribed = false;\r\n        if (listener.next) {\r\n          listener.next.prev = listener.prev;\r\n        } else {\r\n          last = listener.prev;\r\n        }\r\n        if (listener.prev) {\r\n          listener.prev.next = listener.next;\r\n        } else {\r\n          first = listener.next;\r\n        }\r\n      };\r\n    }\r\n  };\r\n}\r\nvar nullListeners = {\r\n  notify() {\r\n  },\r\n  get: () => []\r\n};\r\nfunction createSubscription(store, parentSub) {\r\n  let unsubscribe;\r\n  let listeners = nullListeners;\r\n  let subscriptionsAmount = 0;\r\n  let selfSubscribed = false;\r\n  function addNestedSub(listener) {\r\n    trySubscribe();\r\n    const cleanupListener = listeners.subscribe(listener);\r\n    let removed = false;\r\n    return () => {\r\n      if (!removed) {\r\n        removed = true;\r\n        cleanupListener();\r\n        tryUnsubscribe();\r\n      }\r\n    };\r\n  }\r\n  function notifyNestedSubs() {\r\n    listeners.notify();\r\n  }\r\n  function handleChangeWrapper() {\r\n    if (subscription.onStateChange) {\r\n      subscription.onStateChange();\r\n    }\r\n  }\r\n  function isSubscribed() {\r\n    return selfSubscribed;\r\n  }\r\n  function trySubscribe() {\r\n    subscriptionsAmount++;\r\n    if (!unsubscribe) {\r\n      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);\r\n      listeners = createListenerCollection();\r\n    }\r\n  }\r\n  function tryUnsubscribe() {\r\n    subscriptionsAmount--;\r\n    if (unsubscribe && subscriptionsAmount === 0) {\r\n      unsubscribe();\r\n      unsubscribe = void 0;\r\n      listeners.clear();\r\n      listeners = nullListeners;\r\n    }\r\n  }\r\n  function trySubscribeSelf() {\r\n    if (!selfSubscribed) {\r\n      selfSubscribed = true;\r\n      trySubscribe();\r\n    }\r\n  }\r\n  function tryUnsubscribeSelf() {\r\n    if (selfSubscribed) {\r\n      selfSubscribed = false;\r\n      tryUnsubscribe();\r\n    }\r\n  }\r\n  const subscription = {\r\n    addNestedSub,\r\n    notifyNestedSubs,\r\n    handleChangeWrapper,\r\n    isSubscribed,\r\n    trySubscribe: trySubscribeSelf,\r\n    tryUnsubscribe: tryUnsubscribeSelf,\r\n    getListeners: () => listeners\r\n  };\r\n  return subscription;\r\n}\r\n\r\n// src/utils/useIsomorphicLayoutEffect.ts\r\nvar canUseDOM = () => !!(typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\");\r\nvar isDOM = /* @__PURE__ */ canUseDOM();\r\nvar isRunningInReactNative = () => typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\";\r\nvar isReactNative = /* @__PURE__ */ isRunningInReactNative();\r\nvar getUseIsomorphicLayoutEffect = () => isDOM || isReactNative ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\r\nvar useIsomorphicLayoutEffect = /* @__PURE__ */ getUseIsomorphicLayoutEffect();\r\n\r\n// src/utils/shallowEqual.ts\r\nfunction is(x, y) {\r\n  if (x === y) {\r\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\r\n  } else {\r\n    return x !== x && y !== y;\r\n  }\r\n}\r\nfunction shallowEqual(objA, objB) {\r\n  if (is(objA, objB)) return true;\r\n  if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\r\n    return false;\r\n  }\r\n  const keysA = Object.keys(objA);\r\n  const keysB = Object.keys(objB);\r\n  if (keysA.length !== keysB.length) return false;\r\n  for (let i = 0; i < keysA.length; i++) {\r\n    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// src/utils/hoistStatics.ts\r\nvar REACT_STATICS = {\r\n  childContextTypes: true,\r\n  contextType: true,\r\n  contextTypes: true,\r\n  defaultProps: true,\r\n  displayName: true,\r\n  getDefaultProps: true,\r\n  getDerivedStateFromError: true,\r\n  getDerivedStateFromProps: true,\r\n  mixins: true,\r\n  propTypes: true,\r\n  type: true\r\n};\r\nvar KNOWN_STATICS = {\r\n  name: true,\r\n  length: true,\r\n  prototype: true,\r\n  caller: true,\r\n  callee: true,\r\n  arguments: true,\r\n  arity: true\r\n};\r\nvar FORWARD_REF_STATICS = {\r\n  $$typeof: true,\r\n  render: true,\r\n  defaultProps: true,\r\n  displayName: true,\r\n  propTypes: true\r\n};\r\nvar MEMO_STATICS = {\r\n  $$typeof: true,\r\n  compare: true,\r\n  defaultProps: true,\r\n  displayName: true,\r\n  propTypes: true,\r\n  type: true\r\n};\r\nvar TYPE_STATICS = {\r\n  [ForwardRef]: FORWARD_REF_STATICS,\r\n  [Memo]: MEMO_STATICS\r\n};\r\nfunction getStatics(component) {\r\n  if (isMemo(component)) {\r\n    return MEMO_STATICS;\r\n  }\r\n  return TYPE_STATICS[component[\"$$typeof\"]] || REACT_STATICS;\r\n}\r\nvar defineProperty = Object.defineProperty;\r\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\r\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\r\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\r\nvar getPrototypeOf = Object.getPrototypeOf;\r\nvar objectPrototype = Object.prototype;\r\nfunction hoistNonReactStatics(targetComponent, sourceComponent) {\r\n  if (typeof sourceComponent !== \"string\") {\r\n    if (objectPrototype) {\r\n      const inheritedComponent = getPrototypeOf(sourceComponent);\r\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\r\n        hoistNonReactStatics(targetComponent, inheritedComponent);\r\n      }\r\n    }\r\n    let keys = getOwnPropertyNames(sourceComponent);\r\n    if (getOwnPropertySymbols) {\r\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\r\n    }\r\n    const targetStatics = getStatics(targetComponent);\r\n    const sourceStatics = getStatics(sourceComponent);\r\n    for (let i = 0; i < keys.length; ++i) {\r\n      const key = keys[i];\r\n      if (!KNOWN_STATICS[key] && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\r\n        const descriptor = getOwnPropertyDescriptor(sourceComponent, key);\r\n        try {\r\n          defineProperty(targetComponent, key, descriptor);\r\n        } catch (e) {\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return targetComponent;\r\n}\r\n\r\n// src/components/Context.ts\r\nvar ContextKey = /* @__PURE__ */ Symbol.for(`react-redux-context`);\r\nvar gT = typeof globalThis !== \"undefined\" ? globalThis : (\r\n  /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */\r\n  {}\r\n);\r\nfunction getContext() {\r\n  if (!react__WEBPACK_IMPORTED_MODULE_0__.createContext) return {};\r\n  const contextMap = gT[ContextKey] ??= /* @__PURE__ */ new Map();\r\n  let realContext = contextMap.get(react__WEBPACK_IMPORTED_MODULE_0__.createContext);\r\n  if (!realContext) {\r\n    realContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(\r\n      null\r\n    );\r\n    if (true) {\r\n      realContext.displayName = \"ReactRedux\";\r\n    }\r\n    contextMap.set(react__WEBPACK_IMPORTED_MODULE_0__.createContext, realContext);\r\n  }\r\n  return realContext;\r\n}\r\nvar ReactReduxContext = /* @__PURE__ */ getContext();\r\n\r\n// src/components/connect.tsx\r\nvar NO_SUBSCRIPTION_ARRAY = [null, null];\r\nvar stringifyComponent = (Comp) => {\r\n  try {\r\n    return JSON.stringify(Comp);\r\n  } catch (err) {\r\n    return String(Comp);\r\n  }\r\n};\r\nfunction useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {\r\n  useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies);\r\n}\r\nfunction captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, childPropsFromStoreUpdate, notifyNestedSubs) {\r\n  lastWrapperProps.current = wrapperProps;\r\n  renderIsScheduled.current = false;\r\n  if (childPropsFromStoreUpdate.current) {\r\n    childPropsFromStoreUpdate.current = null;\r\n    notifyNestedSubs();\r\n  }\r\n}\r\nfunction subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, isMounted, childPropsFromStoreUpdate, notifyNestedSubs, additionalSubscribeListener) {\r\n  if (!shouldHandleStateChanges) return () => {\r\n  };\r\n  let didUnsubscribe = false;\r\n  let lastThrownError = null;\r\n  const checkForUpdates = () => {\r\n    if (didUnsubscribe || !isMounted.current) {\r\n      return;\r\n    }\r\n    const latestStoreState = store.getState();\r\n    let newChildProps, error;\r\n    try {\r\n      newChildProps = childPropsSelector(\r\n        latestStoreState,\r\n        lastWrapperProps.current\r\n      );\r\n    } catch (e) {\r\n      error = e;\r\n      lastThrownError = e;\r\n    }\r\n    if (!error) {\r\n      lastThrownError = null;\r\n    }\r\n    if (newChildProps === lastChildProps.current) {\r\n      if (!renderIsScheduled.current) {\r\n        notifyNestedSubs();\r\n      }\r\n    } else {\r\n      lastChildProps.current = newChildProps;\r\n      childPropsFromStoreUpdate.current = newChildProps;\r\n      renderIsScheduled.current = true;\r\n      additionalSubscribeListener();\r\n    }\r\n  };\r\n  subscription.onStateChange = checkForUpdates;\r\n  subscription.trySubscribe();\r\n  checkForUpdates();\r\n  const unsubscribeWrapper = () => {\r\n    didUnsubscribe = true;\r\n    subscription.tryUnsubscribe();\r\n    subscription.onStateChange = null;\r\n    if (lastThrownError) {\r\n      throw lastThrownError;\r\n    }\r\n  };\r\n  return unsubscribeWrapper;\r\n}\r\nfunction strictEqual(a, b) {\r\n  return a === b;\r\n}\r\nvar hasWarnedAboutDeprecatedPureOption = false;\r\nfunction connect(mapStateToProps, mapDispatchToProps, mergeProps, {\r\n  // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.\r\n  // @ts-ignore\r\n  pure,\r\n  areStatesEqual = strictEqual,\r\n  areOwnPropsEqual = shallowEqual,\r\n  areStatePropsEqual = shallowEqual,\r\n  areMergedPropsEqual = shallowEqual,\r\n  // use React's forwardRef to expose a ref of the wrapped component\r\n  forwardRef = false,\r\n  // the context consumer to use\r\n  context = ReactReduxContext\r\n} = {}) {\r\n  if (true) {\r\n    if (pure !== void 0 && !hasWarnedAboutDeprecatedPureOption) {\r\n      hasWarnedAboutDeprecatedPureOption = true;\r\n      warning(\r\n        'The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component'\r\n      );\r\n    }\r\n  }\r\n  const Context = context;\r\n  const initMapStateToProps = mapStateToPropsFactory(mapStateToProps);\r\n  const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps);\r\n  const initMergeProps = mergePropsFactory(mergeProps);\r\n  const shouldHandleStateChanges = Boolean(mapStateToProps);\r\n  const wrapWithConnect = (WrappedComponent) => {\r\n    if (true) {\r\n      const isValid = /* @__PURE__ */ isValidElementType(WrappedComponent);\r\n      if (!isValid)\r\n        throw new Error(\r\n          `You must pass a component to the function returned by connect. Instead received ${stringifyComponent(\r\n            WrappedComponent\r\n          )}`\r\n        );\r\n    }\r\n    const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || \"Component\";\r\n    const displayName = `Connect(${wrappedComponentName})`;\r\n    const selectorFactoryOptions = {\r\n      shouldHandleStateChanges,\r\n      displayName,\r\n      wrappedComponentName,\r\n      WrappedComponent,\r\n      // @ts-ignore\r\n      initMapStateToProps,\r\n      initMapDispatchToProps,\r\n      initMergeProps,\r\n      areStatesEqual,\r\n      areStatePropsEqual,\r\n      areOwnPropsEqual,\r\n      areMergedPropsEqual\r\n    };\r\n    function ConnectFunction(props) {\r\n      const [propsContext, reactReduxForwardedRef, wrapperProps] = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n        const { reactReduxForwardedRef: reactReduxForwardedRef2, ...wrapperProps2 } = props;\r\n        return [props.context, reactReduxForwardedRef2, wrapperProps2];\r\n      }, [props]);\r\n      const ContextToUse = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n        let ResultContext = Context;\r\n        if (propsContext?.Consumer) {\r\n          if (true) {\r\n            const isValid = /* @__PURE__ */ isContextConsumer(\r\n              // @ts-ignore\r\n              /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(propsContext.Consumer, null)\r\n            );\r\n            if (!isValid) {\r\n              throw new Error(\r\n                \"You must pass a valid React context consumer as `props.context`\"\r\n              );\r\n            }\r\n            ResultContext = propsContext;\r\n          }\r\n        }\r\n        return ResultContext;\r\n      }, [propsContext, Context]);\r\n      const contextValue = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ContextToUse);\r\n      const didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);\r\n      const didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);\r\n      if ( true && !didStoreComeFromProps && !didStoreComeFromContext) {\r\n        throw new Error(\r\n          `Could not find \"store\" in the context of \"${displayName}\". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to ${displayName} in connect options.`\r\n        );\r\n      }\r\n      const store = didStoreComeFromProps ? props.store : contextValue.store;\r\n      const getServerState = didStoreComeFromContext ? contextValue.getServerState : store.getState;\r\n      const childPropsSelector = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n        return finalPropsSelectorFactory(store.dispatch, selectorFactoryOptions);\r\n      }, [store]);\r\n      const [subscription, notifyNestedSubs] = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY;\r\n        const subscription2 = createSubscription(\r\n          store,\r\n          didStoreComeFromProps ? void 0 : contextValue.subscription\r\n        );\r\n        const notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);\r\n        return [subscription2, notifyNestedSubs2];\r\n      }, [store, didStoreComeFromProps, contextValue]);\r\n      const overriddenContextValue = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n        if (didStoreComeFromProps) {\r\n          return contextValue;\r\n        }\r\n        return {\r\n          ...contextValue,\r\n          subscription\r\n        };\r\n      }, [didStoreComeFromProps, contextValue, subscription]);\r\n      const lastChildProps = react__WEBPACK_IMPORTED_MODULE_0__.useRef(void 0);\r\n      const lastWrapperProps = react__WEBPACK_IMPORTED_MODULE_0__.useRef(wrapperProps);\r\n      const childPropsFromStoreUpdate = react__WEBPACK_IMPORTED_MODULE_0__.useRef(void 0);\r\n      const renderIsScheduled = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n      const isMounted = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\r\n      const latestSubscriptionCallbackError = react__WEBPACK_IMPORTED_MODULE_0__.useRef(\r\n        void 0\r\n      );\r\n      useIsomorphicLayoutEffect(() => {\r\n        isMounted.current = true;\r\n        return () => {\r\n          isMounted.current = false;\r\n        };\r\n      }, []);\r\n      const actualChildPropsSelector = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n        const selector = () => {\r\n          if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {\r\n            return childPropsFromStoreUpdate.current;\r\n          }\r\n          return childPropsSelector(store.getState(), wrapperProps);\r\n        };\r\n        return selector;\r\n      }, [store, wrapperProps]);\r\n      const subscribeForReact = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n        const subscribe = (reactListener) => {\r\n          if (!subscription) {\r\n            return () => {\r\n            };\r\n          }\r\n          return subscribeUpdates(\r\n            shouldHandleStateChanges,\r\n            store,\r\n            subscription,\r\n            // @ts-ignore\r\n            childPropsSelector,\r\n            lastWrapperProps,\r\n            lastChildProps,\r\n            renderIsScheduled,\r\n            isMounted,\r\n            childPropsFromStoreUpdate,\r\n            notifyNestedSubs,\r\n            reactListener\r\n          );\r\n        };\r\n        return subscribe;\r\n      }, [subscription]);\r\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [\r\n        lastWrapperProps,\r\n        lastChildProps,\r\n        renderIsScheduled,\r\n        wrapperProps,\r\n        childPropsFromStoreUpdate,\r\n        notifyNestedSubs\r\n      ]);\r\n      let actualChildProps;\r\n      try {\r\n        actualChildProps = react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore(\r\n          // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\r\n          subscribeForReact,\r\n          // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\r\n          // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\r\n          actualChildPropsSelector,\r\n          getServerState ? () => childPropsSelector(getServerState(), wrapperProps) : actualChildPropsSelector\r\n        );\r\n      } catch (err) {\r\n        if (latestSubscriptionCallbackError.current) {\r\n          ;\r\n          err.message += `\r\nThe error may be correlated with this previous error:\r\n${latestSubscriptionCallbackError.current.stack}\r\n\r\n`;\r\n        }\r\n        throw err;\r\n      }\r\n      useIsomorphicLayoutEffect(() => {\r\n        latestSubscriptionCallbackError.current = void 0;\r\n        childPropsFromStoreUpdate.current = void 0;\r\n        lastChildProps.current = actualChildProps;\r\n      });\r\n      const renderedWrappedComponent = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n        return (\r\n          // @ts-ignore\r\n          /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\r\n            WrappedComponent,\r\n            {\r\n              ...actualChildProps,\r\n              ref: reactReduxForwardedRef\r\n            }\r\n          )\r\n        );\r\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);\r\n      const renderedChild = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n        if (shouldHandleStateChanges) {\r\n          return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ContextToUse.Provider, { value: overriddenContextValue }, renderedWrappedComponent);\r\n        }\r\n        return renderedWrappedComponent;\r\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);\r\n      return renderedChild;\r\n    }\r\n    const _Connect = react__WEBPACK_IMPORTED_MODULE_0__.memo(ConnectFunction);\r\n    const Connect = _Connect;\r\n    Connect.WrappedComponent = WrappedComponent;\r\n    Connect.displayName = ConnectFunction.displayName = displayName;\r\n    if (forwardRef) {\r\n      const _forwarded = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\r\n        function forwardConnectRef(props, ref) {\r\n          return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Connect, { ...props, reactReduxForwardedRef: ref });\r\n        }\r\n      );\r\n      const forwarded = _forwarded;\r\n      forwarded.displayName = displayName;\r\n      forwarded.WrappedComponent = WrappedComponent;\r\n      return /* @__PURE__ */ hoistNonReactStatics(forwarded, WrappedComponent);\r\n    }\r\n    return /* @__PURE__ */ hoistNonReactStatics(Connect, WrappedComponent);\r\n  };\r\n  return wrapWithConnect;\r\n}\r\nvar connect_default = connect;\r\n\r\n// src/components/Provider.tsx\r\nfunction Provider(providerProps) {\r\n  const { children, context, serverState, store } = providerProps;\r\n  const contextValue = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\r\n    const subscription = createSubscription(store);\r\n    const baseContextValue = {\r\n      store,\r\n      subscription,\r\n      getServerState: serverState ? () => serverState : void 0\r\n    };\r\n    if (false) {} else {\r\n      const { identityFunctionCheck = \"once\", stabilityCheck = \"once\" } = providerProps;\r\n      return /* @__PURE__ */ Object.assign(baseContextValue, {\r\n        stabilityCheck,\r\n        identityFunctionCheck\r\n      });\r\n    }\r\n  }, [store, serverState]);\r\n  const previousState = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => store.getState(), [store]);\r\n  useIsomorphicLayoutEffect(() => {\r\n    const { subscription } = contextValue;\r\n    subscription.onStateChange = subscription.notifyNestedSubs;\r\n    subscription.trySubscribe();\r\n    if (previousState !== store.getState()) {\r\n      subscription.notifyNestedSubs();\r\n    }\r\n    return () => {\r\n      subscription.tryUnsubscribe();\r\n      subscription.onStateChange = void 0;\r\n    };\r\n  }, [contextValue, previousState]);\r\n  const Context = context || ReactReduxContext;\r\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Context.Provider, { value: contextValue }, children);\r\n}\r\nvar Provider_default = Provider;\r\n\r\n// src/hooks/useReduxContext.ts\r\nfunction createReduxContextHook(context = ReactReduxContext) {\r\n  return function useReduxContext2() {\r\n    const contextValue = react__WEBPACK_IMPORTED_MODULE_0__.useContext(context);\r\n    if ( true && !contextValue) {\r\n      throw new Error(\r\n        \"could not find react-redux context value; please ensure the component is wrapped in a <Provider>\"\r\n      );\r\n    }\r\n    return contextValue;\r\n  };\r\n}\r\nvar useReduxContext = /* @__PURE__ */ createReduxContextHook();\r\n\r\n// src/hooks/useStore.ts\r\nfunction createStoreHook(context = ReactReduxContext) {\r\n  const useReduxContext2 = context === ReactReduxContext ? useReduxContext : (\r\n    // @ts-ignore\r\n    createReduxContextHook(context)\r\n  );\r\n  const useStore2 = () => {\r\n    const { store } = useReduxContext2();\r\n    return store;\r\n  };\r\n  Object.assign(useStore2, {\r\n    withTypes: () => useStore2\r\n  });\r\n  return useStore2;\r\n}\r\nvar useStore = /* @__PURE__ */ createStoreHook();\r\n\r\n// src/hooks/useDispatch.ts\r\nfunction createDispatchHook(context = ReactReduxContext) {\r\n  const useStore2 = context === ReactReduxContext ? useStore : createStoreHook(context);\r\n  const useDispatch2 = () => {\r\n    const store = useStore2();\r\n    return store.dispatch;\r\n  };\r\n  Object.assign(useDispatch2, {\r\n    withTypes: () => useDispatch2\r\n  });\r\n  return useDispatch2;\r\n}\r\nvar useDispatch = /* @__PURE__ */ createDispatchHook();\r\n\r\n// src/hooks/useSelector.ts\r\n\r\nvar refEquality = (a, b) => a === b;\r\nfunction createSelectorHook(context = ReactReduxContext) {\r\n  const useReduxContext2 = context === ReactReduxContext ? useReduxContext : createReduxContextHook(context);\r\n  const useSelector2 = (selector, equalityFnOrOptions = {}) => {\r\n    const { equalityFn = refEquality } = typeof equalityFnOrOptions === \"function\" ? { equalityFn: equalityFnOrOptions } : equalityFnOrOptions;\r\n    if (true) {\r\n      if (!selector) {\r\n        throw new Error(`You must pass a selector to useSelector`);\r\n      }\r\n      if (typeof selector !== \"function\") {\r\n        throw new Error(`You must pass a function as a selector to useSelector`);\r\n      }\r\n      if (typeof equalityFn !== \"function\") {\r\n        throw new Error(\r\n          `You must pass a function as an equality function to useSelector`\r\n        );\r\n      }\r\n    }\r\n    const reduxContext = useReduxContext2();\r\n    const { store, subscription, getServerState } = reduxContext;\r\n    const firstRun = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);\r\n    const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\r\n      {\r\n        [selector.name](state) {\r\n          const selected = selector(state);\r\n          if (true) {\r\n            const { devModeChecks = {} } = typeof equalityFnOrOptions === \"function\" ? {} : equalityFnOrOptions;\r\n            const { identityFunctionCheck, stabilityCheck } = reduxContext;\r\n            const {\r\n              identityFunctionCheck: finalIdentityFunctionCheck,\r\n              stabilityCheck: finalStabilityCheck\r\n            } = {\r\n              stabilityCheck,\r\n              identityFunctionCheck,\r\n              ...devModeChecks\r\n            };\r\n            if (finalStabilityCheck === \"always\" || finalStabilityCheck === \"once\" && firstRun.current) {\r\n              const toCompare = selector(state);\r\n              if (!equalityFn(selected, toCompare)) {\r\n                let stack = void 0;\r\n                try {\r\n                  throw new Error();\r\n                } catch (e) {\r\n                  ;\r\n                  ({ stack } = e);\r\n                }\r\n                console.warn(\r\n                  \"Selector \" + (selector.name || \"unknown\") + \" returned a different result when called with the same parameters. This can lead to unnecessary rerenders.\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization\",\r\n                  {\r\n                    state,\r\n                    selected,\r\n                    selected2: toCompare,\r\n                    stack\r\n                  }\r\n                );\r\n              }\r\n            }\r\n            if (finalIdentityFunctionCheck === \"always\" || finalIdentityFunctionCheck === \"once\" && firstRun.current) {\r\n              if (selected === state) {\r\n                let stack = void 0;\r\n                try {\r\n                  throw new Error();\r\n                } catch (e) {\r\n                  ;\r\n                  ({ stack } = e);\r\n                }\r\n                console.warn(\r\n                  \"Selector \" + (selector.name || \"unknown\") + \" returned the root state when called. This can lead to unnecessary rerenders.\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.\",\r\n                  { stack }\r\n                );\r\n              }\r\n            }\r\n            if (firstRun.current) firstRun.current = false;\r\n          }\r\n          return selected;\r\n        }\r\n      }[selector.name],\r\n      [selector]\r\n    );\r\n    const selectedState = (0,use_sync_external_store_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(\r\n      subscription.addNestedSub,\r\n      store.getState,\r\n      getServerState || store.getState,\r\n      wrappedSelector,\r\n      equalityFn\r\n    );\r\n    react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue(selectedState);\r\n    return selectedState;\r\n  };\r\n  Object.assign(useSelector2, {\r\n    withTypes: () => useSelector2\r\n  });\r\n  return useSelector2;\r\n}\r\nvar useSelector = /* @__PURE__ */ createSelectorHook();\r\n\r\n// src/exports.ts\r\nvar batch = defaultNoopBatch;\r\n\r\n//# sourceMappingURL=react-redux.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-redux/dist/react-redux.mjs\n");

/***/ })

};
;