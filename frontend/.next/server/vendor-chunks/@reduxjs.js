"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@reduxjs";
exports.ids = ["vendor-chunks/@reduxjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReducerType: () => (/* binding */ ReducerType),\n/* harmony export */   SHOULD_AUTOBATCH: () => (/* binding */ SHOULD_AUTOBATCH),\n/* harmony export */   TaskAbortError: () => (/* binding */ TaskAbortError),\n/* harmony export */   Tuple: () => (/* binding */ Tuple),\n/* harmony export */   __DO_NOT_USE__ActionTypes: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.__DO_NOT_USE__ActionTypes),\n/* harmony export */   addListener: () => (/* binding */ addListener),\n/* harmony export */   applyMiddleware: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware),\n/* harmony export */   asyncThunkCreator: () => (/* binding */ asyncThunkCreator),\n/* harmony export */   autoBatchEnhancer: () => (/* binding */ autoBatchEnhancer),\n/* harmony export */   bindActionCreators: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.bindActionCreators),\n/* harmony export */   buildCreateSlice: () => (/* binding */ buildCreateSlice),\n/* harmony export */   clearAllListeners: () => (/* binding */ clearAllListeners),\n/* harmony export */   combineReducers: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers),\n/* harmony export */   combineSlices: () => (/* binding */ combineSlices),\n/* harmony export */   compose: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.compose),\n/* harmony export */   configureStore: () => (/* binding */ configureStore),\n/* harmony export */   createAction: () => (/* binding */ createAction),\n/* harmony export */   createActionCreatorInvariantMiddleware: () => (/* binding */ createActionCreatorInvariantMiddleware),\n/* harmony export */   createAsyncThunk: () => (/* binding */ createAsyncThunk),\n/* harmony export */   createDraftSafeSelector: () => (/* binding */ createDraftSafeSelector),\n/* harmony export */   createDraftSafeSelectorCreator: () => (/* binding */ createDraftSafeSelectorCreator),\n/* harmony export */   createDynamicMiddleware: () => (/* binding */ createDynamicMiddleware),\n/* harmony export */   createEntityAdapter: () => (/* binding */ createEntityAdapter),\n/* harmony export */   createImmutableStateInvariantMiddleware: () => (/* binding */ createImmutableStateInvariantMiddleware),\n/* harmony export */   createListenerMiddleware: () => (/* binding */ createListenerMiddleware),\n/* harmony export */   createNextState: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.produce),\n/* harmony export */   createReducer: () => (/* binding */ createReducer),\n/* harmony export */   createSelector: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.createSelector),\n/* harmony export */   createSelectorCreator: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.createSelectorCreator),\n/* harmony export */   createSerializableStateInvariantMiddleware: () => (/* binding */ createSerializableStateInvariantMiddleware),\n/* harmony export */   createSlice: () => (/* binding */ createSlice),\n/* harmony export */   createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.createStore),\n/* harmony export */   current: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.current),\n/* harmony export */   findNonSerializableValue: () => (/* binding */ findNonSerializableValue),\n/* harmony export */   formatProdErrorMessage: () => (/* binding */ formatProdErrorMessage),\n/* harmony export */   freeze: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.freeze),\n/* harmony export */   isAction: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.isAction),\n/* harmony export */   isActionCreator: () => (/* binding */ isActionCreator),\n/* harmony export */   isAllOf: () => (/* binding */ isAllOf),\n/* harmony export */   isAnyOf: () => (/* binding */ isAnyOf),\n/* harmony export */   isAsyncThunkAction: () => (/* binding */ isAsyncThunkAction),\n/* harmony export */   isDraft: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.isDraft),\n/* harmony export */   isFluxStandardAction: () => (/* binding */ isFSA),\n/* harmony export */   isFulfilled: () => (/* binding */ isFulfilled),\n/* harmony export */   isImmutableDefault: () => (/* binding */ isImmutableDefault),\n/* harmony export */   isPending: () => (/* binding */ isPending),\n/* harmony export */   isPlain: () => (/* binding */ isPlain),\n/* harmony export */   isPlainObject: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject),\n/* harmony export */   isRejected: () => (/* binding */ isRejected),\n/* harmony export */   isRejectedWithValue: () => (/* binding */ isRejectedWithValue),\n/* harmony export */   legacy_createStore: () => (/* reexport safe */ redux__WEBPACK_IMPORTED_MODULE_0__.legacy_createStore),\n/* harmony export */   lruMemoize: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.lruMemoize),\n/* harmony export */   miniSerializeError: () => (/* binding */ miniSerializeError),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   original: () => (/* reexport safe */ immer__WEBPACK_IMPORTED_MODULE_2__.original),\n/* harmony export */   prepareAutoBatched: () => (/* binding */ prepareAutoBatched),\n/* harmony export */   removeListener: () => (/* binding */ removeListener),\n/* harmony export */   unwrapResult: () => (/* binding */ unwrapResult),\n/* harmony export */   weakMapMemoize: () => (/* reexport safe */ reselect__WEBPACK_IMPORTED_MODULE_1__.weakMapMemoize)\n/* harmony export */ });\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ \"(ssr)/./node_modules/redux/dist/redux.mjs\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! immer */ \"(ssr)/./node_modules/immer/dist/immer.mjs\");\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reselect */ \"(ssr)/./node_modules/reselect/dist/reselect.mjs\");\n/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! redux-thunk */ \"(ssr)/./node_modules/redux-thunk/dist/redux-thunk.mjs\");\n// src/index.ts\r\n\r\n\r\n\r\n\r\n// src/createDraftSafeSelector.ts\r\n\r\n\r\nvar createDraftSafeSelectorCreator = (...args) => {\r\n  const createSelector2 = (0,reselect__WEBPACK_IMPORTED_MODULE_1__.createSelectorCreator)(...args);\r\n  const createDraftSafeSelector2 = Object.assign((...args2) => {\r\n    const selector = createSelector2(...args2);\r\n    const wrappedSelector = (value, ...rest) => selector((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(value) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.current)(value) : value, ...rest);\r\n    Object.assign(wrappedSelector, selector);\r\n    return wrappedSelector;\r\n  }, {\r\n    withTypes: () => createDraftSafeSelector2\r\n  });\r\n  return createDraftSafeSelector2;\r\n};\r\nvar createDraftSafeSelector = /* @__PURE__ */ createDraftSafeSelectorCreator(reselect__WEBPACK_IMPORTED_MODULE_1__.weakMapMemoize);\r\n\r\n// src/configureStore.ts\r\n\r\n\r\n// src/devtoolsExtension.ts\r\n\r\nvar composeWithDevTools = typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {\r\n  if (arguments.length === 0) return void 0;\r\n  if (typeof arguments[0] === \"object\") return redux__WEBPACK_IMPORTED_MODULE_0__.compose;\r\n  return redux__WEBPACK_IMPORTED_MODULE_0__.compose.apply(null, arguments);\r\n};\r\nvar devToolsEnhancer = typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function() {\r\n  return function(noop3) {\r\n    return noop3;\r\n  };\r\n};\r\n\r\n// src/getDefaultMiddleware.ts\r\n\r\n\r\n// src/createAction.ts\r\n\r\n\r\n// src/tsHelpers.ts\r\nvar hasMatchFunction = (v) => {\r\n  return v && typeof v.match === \"function\";\r\n};\r\n\r\n// src/createAction.ts\r\nfunction createAction(type, prepareAction) {\r\n  function actionCreator(...args) {\r\n    if (prepareAction) {\r\n      let prepared = prepareAction(...args);\r\n      if (!prepared) {\r\n        throw new Error( false ? 0 : \"prepareAction did not return an object\");\r\n      }\r\n      return {\r\n        type,\r\n        payload: prepared.payload,\r\n        ...\"meta\" in prepared && {\r\n          meta: prepared.meta\r\n        },\r\n        ...\"error\" in prepared && {\r\n          error: prepared.error\r\n        }\r\n      };\r\n    }\r\n    return {\r\n      type,\r\n      payload: args[0]\r\n    };\r\n  }\r\n  actionCreator.toString = () => `${type}`;\r\n  actionCreator.type = type;\r\n  actionCreator.match = (action) => (0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action) && action.type === type;\r\n  return actionCreator;\r\n}\r\nfunction isActionCreator(action) {\r\n  return typeof action === \"function\" && \"type\" in action && // hasMatchFunction only wants Matchers but I don't see the point in rewriting it\r\n  hasMatchFunction(action);\r\n}\r\nfunction isFSA(action) {\r\n  return (0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action) && Object.keys(action).every(isValidKey);\r\n}\r\nfunction isValidKey(key) {\r\n  return [\"type\", \"payload\", \"error\", \"meta\"].indexOf(key) > -1;\r\n}\r\n\r\n// src/actionCreatorInvariantMiddleware.ts\r\nfunction getMessage(type) {\r\n  const splitType = type ? `${type}`.split(\"/\") : [];\r\n  const actionName = splitType[splitType.length - 1] || \"actionCreator\";\r\n  return `Detected an action creator with type \"${type || \"unknown\"}\" being dispatched. \r\nMake sure you're calling the action creator before dispatching, i.e. \\`dispatch(${actionName}())\\` instead of \\`dispatch(${actionName})\\`. This is necessary even if the action has no payload.`;\r\n}\r\nfunction createActionCreatorInvariantMiddleware(options = {}) {\r\n  if (false) {}\r\n  const {\r\n    isActionCreator: isActionCreator2 = isActionCreator\r\n  } = options;\r\n  return () => (next) => (action) => {\r\n    if (isActionCreator2(action)) {\r\n      console.warn(getMessage(action.type));\r\n    }\r\n    return next(action);\r\n  };\r\n}\r\n\r\n// src/utils.ts\r\n\r\nfunction getTimeMeasureUtils(maxDelay, fnName) {\r\n  let elapsed = 0;\r\n  return {\r\n    measureTime(fn) {\r\n      const started = Date.now();\r\n      try {\r\n        return fn();\r\n      } finally {\r\n        const finished = Date.now();\r\n        elapsed += finished - started;\r\n      }\r\n    },\r\n    warnIfExceeded() {\r\n      if (elapsed > maxDelay) {\r\n        console.warn(`${fnName} took ${elapsed}ms, which is more than the warning threshold of ${maxDelay}ms. \r\nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\r\nIt is disabled in production builds, so you don't need to worry about that.`);\r\n      }\r\n    }\r\n  };\r\n}\r\nvar Tuple = class _Tuple extends Array {\r\n  constructor(...items) {\r\n    super(...items);\r\n    Object.setPrototypeOf(this, _Tuple.prototype);\r\n  }\r\n  static get [Symbol.species]() {\r\n    return _Tuple;\r\n  }\r\n  concat(...arr) {\r\n    return super.concat.apply(this, arr);\r\n  }\r\n  prepend(...arr) {\r\n    if (arr.length === 1 && Array.isArray(arr[0])) {\r\n      return new _Tuple(...arr[0].concat(this));\r\n    }\r\n    return new _Tuple(...arr.concat(this));\r\n  }\r\n};\r\nfunction freezeDraftable(val) {\r\n  return (0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(val) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(val, () => {\r\n  }) : val;\r\n}\r\nfunction getOrInsertComputed(map, key, compute) {\r\n  if (map.has(key)) return map.get(key);\r\n  return map.set(key, compute(key)).get(key);\r\n}\r\n\r\n// src/immutableStateInvariantMiddleware.ts\r\nfunction isImmutableDefault(value) {\r\n  return typeof value !== \"object\" || value == null || Object.isFrozen(value);\r\n}\r\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\r\n  const trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\r\n  return {\r\n    detectMutations() {\r\n      return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\r\n    }\r\n  };\r\n}\r\nfunction trackProperties(isImmutable, ignorePaths = [], obj, path = \"\", checkedObjects = /* @__PURE__ */ new Set()) {\r\n  const tracked = {\r\n    value: obj\r\n  };\r\n  if (!isImmutable(obj) && !checkedObjects.has(obj)) {\r\n    checkedObjects.add(obj);\r\n    tracked.children = {};\r\n    for (const key in obj) {\r\n      const childPath = path ? path + \".\" + key : key;\r\n      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\r\n        continue;\r\n      }\r\n      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\r\n    }\r\n  }\r\n  return tracked;\r\n}\r\nfunction detectMutations(isImmutable, ignoredPaths = [], trackedProperty, obj, sameParentRef = false, path = \"\") {\r\n  const prevObj = trackedProperty ? trackedProperty.value : void 0;\r\n  const sameRef = prevObj === obj;\r\n  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\r\n    return {\r\n      wasMutated: true,\r\n      path\r\n    };\r\n  }\r\n  if (isImmutable(prevObj) || isImmutable(obj)) {\r\n    return {\r\n      wasMutated: false\r\n    };\r\n  }\r\n  const keysToDetect = {};\r\n  for (let key in trackedProperty.children) {\r\n    keysToDetect[key] = true;\r\n  }\r\n  for (let key in obj) {\r\n    keysToDetect[key] = true;\r\n  }\r\n  const hasIgnoredPaths = ignoredPaths.length > 0;\r\n  for (let key in keysToDetect) {\r\n    const nestedPath = path ? path + \".\" + key : key;\r\n    if (hasIgnoredPaths) {\r\n      const hasMatches = ignoredPaths.some((ignored) => {\r\n        if (ignored instanceof RegExp) {\r\n          return ignored.test(nestedPath);\r\n        }\r\n        return nestedPath === ignored;\r\n      });\r\n      if (hasMatches) {\r\n        continue;\r\n      }\r\n    }\r\n    const result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key], obj[key], sameRef, nestedPath);\r\n    if (result.wasMutated) {\r\n      return result;\r\n    }\r\n  }\r\n  return {\r\n    wasMutated: false\r\n  };\r\n}\r\nfunction createImmutableStateInvariantMiddleware(options = {}) {\r\n  if (false) {} else {\r\n    let stringify2 = function(obj, serializer, indent, decycler) {\r\n      return JSON.stringify(obj, getSerialize2(serializer, decycler), indent);\r\n    }, getSerialize2 = function(serializer, decycler) {\r\n      let stack = [], keys = [];\r\n      if (!decycler) decycler = function(_, value) {\r\n        if (stack[0] === value) return \"[Circular ~]\";\r\n        return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\r\n      };\r\n      return function(key, value) {\r\n        if (stack.length > 0) {\r\n          var thisPos = stack.indexOf(this);\r\n          ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\r\n          ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\r\n          if (~stack.indexOf(value)) value = decycler.call(this, key, value);\r\n        } else stack.push(value);\r\n        return serializer == null ? value : serializer.call(this, key, value);\r\n      };\r\n    };\r\n    var stringify = stringify2, getSerialize = getSerialize2;\r\n    let {\r\n      isImmutable = isImmutableDefault,\r\n      ignoredPaths,\r\n      warnAfter = 32\r\n    } = options;\r\n    const track = trackForMutations.bind(null, isImmutable, ignoredPaths);\r\n    return ({\r\n      getState\r\n    }) => {\r\n      let state = getState();\r\n      let tracker = track(state);\r\n      let result;\r\n      return (next) => (action) => {\r\n        const measureUtils = getTimeMeasureUtils(warnAfter, \"ImmutableStateInvariantMiddleware\");\r\n        measureUtils.measureTime(() => {\r\n          state = getState();\r\n          result = tracker.detectMutations();\r\n          tracker = track(state);\r\n          if (result.wasMutated) {\r\n            throw new Error( false ? 0 : `A state mutation was detected between dispatches, in the path '${result.path || \"\"}'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\r\n          }\r\n        });\r\n        const dispatchedAction = next(action);\r\n        measureUtils.measureTime(() => {\r\n          state = getState();\r\n          result = tracker.detectMutations();\r\n          tracker = track(state);\r\n          if (result.wasMutated) {\r\n            throw new Error( false ? 0 : `A state mutation was detected inside a dispatch, in the path: ${result.path || \"\"}. Take a look at the reducer(s) handling the action ${stringify2(action)}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\r\n          }\r\n        });\r\n        measureUtils.warnIfExceeded();\r\n        return dispatchedAction;\r\n      };\r\n    };\r\n  }\r\n}\r\n\r\n// src/serializableStateInvariantMiddleware.ts\r\n\r\nfunction isPlain(val) {\r\n  const type = typeof val;\r\n  return val == null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(val) || (0,redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(val);\r\n}\r\nfunction findNonSerializableValue(value, path = \"\", isSerializable = isPlain, getEntries, ignoredPaths = [], cache) {\r\n  let foundNestedSerializable;\r\n  if (!isSerializable(value)) {\r\n    return {\r\n      keyPath: path || \"<root>\",\r\n      value\r\n    };\r\n  }\r\n  if (typeof value !== \"object\" || value === null) {\r\n    return false;\r\n  }\r\n  if (cache?.has(value)) return false;\r\n  const entries = getEntries != null ? getEntries(value) : Object.entries(value);\r\n  const hasIgnoredPaths = ignoredPaths.length > 0;\r\n  for (const [key, nestedValue] of entries) {\r\n    const nestedPath = path ? path + \".\" + key : key;\r\n    if (hasIgnoredPaths) {\r\n      const hasMatches = ignoredPaths.some((ignored) => {\r\n        if (ignored instanceof RegExp) {\r\n          return ignored.test(nestedPath);\r\n        }\r\n        return nestedPath === ignored;\r\n      });\r\n      if (hasMatches) {\r\n        continue;\r\n      }\r\n    }\r\n    if (!isSerializable(nestedValue)) {\r\n      return {\r\n        keyPath: nestedPath,\r\n        value: nestedValue\r\n      };\r\n    }\r\n    if (typeof nestedValue === \"object\") {\r\n      foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);\r\n      if (foundNestedSerializable) {\r\n        return foundNestedSerializable;\r\n      }\r\n    }\r\n  }\r\n  if (cache && isNestedFrozen(value)) cache.add(value);\r\n  return false;\r\n}\r\nfunction isNestedFrozen(value) {\r\n  if (!Object.isFrozen(value)) return false;\r\n  for (const nestedValue of Object.values(value)) {\r\n    if (typeof nestedValue !== \"object\" || nestedValue === null) continue;\r\n    if (!isNestedFrozen(nestedValue)) return false;\r\n  }\r\n  return true;\r\n}\r\nfunction createSerializableStateInvariantMiddleware(options = {}) {\r\n  if (false) {} else {\r\n    const {\r\n      isSerializable = isPlain,\r\n      getEntries,\r\n      ignoredActions = [],\r\n      ignoredActionPaths = [\"meta.arg\", \"meta.baseQueryMeta\"],\r\n      ignoredPaths = [],\r\n      warnAfter = 32,\r\n      ignoreState = false,\r\n      ignoreActions = false,\r\n      disableCache = false\r\n    } = options;\r\n    const cache = !disableCache && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;\r\n    return (storeAPI) => (next) => (action) => {\r\n      if (!(0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action)) {\r\n        return next(action);\r\n      }\r\n      const result = next(action);\r\n      const measureUtils = getTimeMeasureUtils(warnAfter, \"SerializableStateInvariantMiddleware\");\r\n      if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {\r\n        measureUtils.measureTime(() => {\r\n          const foundActionNonSerializableValue = findNonSerializableValue(action, \"\", isSerializable, getEntries, ignoredActionPaths, cache);\r\n          if (foundActionNonSerializableValue) {\r\n            const {\r\n              keyPath,\r\n              value\r\n            } = foundActionNonSerializableValue;\r\n            console.error(`A non-serializable value was detected in an action, in the path: \\`${keyPath}\\`. Value:`, value, \"\\nTake a look at the logic that dispatched this action: \", action, \"\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)\", \"\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)\");\r\n          }\r\n        });\r\n      }\r\n      if (!ignoreState) {\r\n        measureUtils.measureTime(() => {\r\n          const state = storeAPI.getState();\r\n          const foundStateNonSerializableValue = findNonSerializableValue(state, \"\", isSerializable, getEntries, ignoredPaths, cache);\r\n          if (foundStateNonSerializableValue) {\r\n            const {\r\n              keyPath,\r\n              value\r\n            } = foundStateNonSerializableValue;\r\n            console.error(`A non-serializable value was detected in the state, in the path: \\`${keyPath}\\`. Value:`, value, `\r\nTake a look at the reducer(s) handling this action type: ${action.type}.\r\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`);\r\n          }\r\n        });\r\n        measureUtils.warnIfExceeded();\r\n      }\r\n      return result;\r\n    };\r\n  }\r\n}\r\n\r\n// src/getDefaultMiddleware.ts\r\nfunction isBoolean(x) {\r\n  return typeof x === \"boolean\";\r\n}\r\nvar buildGetDefaultMiddleware = () => function getDefaultMiddleware(options) {\r\n  const {\r\n    thunk = true,\r\n    immutableCheck = true,\r\n    serializableCheck = true,\r\n    actionCreatorCheck = true\r\n  } = options ?? {};\r\n  let middlewareArray = new Tuple();\r\n  if (thunk) {\r\n    if (isBoolean(thunk)) {\r\n      middlewareArray.push(redux_thunk__WEBPACK_IMPORTED_MODULE_3__.thunk);\r\n    } else {\r\n      middlewareArray.push((0,redux_thunk__WEBPACK_IMPORTED_MODULE_3__.withExtraArgument)(thunk.extraArgument));\r\n    }\r\n  }\r\n  if (true) {\r\n    if (immutableCheck) {\r\n      let immutableOptions = {};\r\n      if (!isBoolean(immutableCheck)) {\r\n        immutableOptions = immutableCheck;\r\n      }\r\n      middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\r\n    }\r\n    if (serializableCheck) {\r\n      let serializableOptions = {};\r\n      if (!isBoolean(serializableCheck)) {\r\n        serializableOptions = serializableCheck;\r\n      }\r\n      middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\r\n    }\r\n    if (actionCreatorCheck) {\r\n      let actionCreatorOptions = {};\r\n      if (!isBoolean(actionCreatorCheck)) {\r\n        actionCreatorOptions = actionCreatorCheck;\r\n      }\r\n      middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));\r\n    }\r\n  }\r\n  return middlewareArray;\r\n};\r\n\r\n// src/autoBatchEnhancer.ts\r\nvar SHOULD_AUTOBATCH = \"RTK_autoBatch\";\r\nvar prepareAutoBatched = () => (payload) => ({\r\n  payload,\r\n  meta: {\r\n    [SHOULD_AUTOBATCH]: true\r\n  }\r\n});\r\nvar createQueueWithTimer = (timeout) => {\r\n  return (notify) => {\r\n    setTimeout(notify, timeout);\r\n  };\r\n};\r\nvar autoBatchEnhancer = (options = {\r\n  type: \"raf\"\r\n}) => (next) => (...args) => {\r\n  const store = next(...args);\r\n  let notifying = true;\r\n  let shouldNotifyAtEndOfTick = false;\r\n  let notificationQueued = false;\r\n  const listeners = /* @__PURE__ */ new Set();\r\n  const queueCallback = options.type === \"tick\" ? queueMicrotask : options.type === \"raf\" ? (\r\n    // requestAnimationFrame won't exist in SSR environments. Fall back to a vague approximation just to keep from erroring.\r\n    typeof window !== \"undefined\" && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10)\r\n  ) : options.type === \"callback\" ? options.queueNotification : createQueueWithTimer(options.timeout);\r\n  const notifyListeners = () => {\r\n    notificationQueued = false;\r\n    if (shouldNotifyAtEndOfTick) {\r\n      shouldNotifyAtEndOfTick = false;\r\n      listeners.forEach((l) => l());\r\n    }\r\n  };\r\n  return Object.assign({}, store, {\r\n    // Override the base `store.subscribe` method to keep original listeners\r\n    // from running if we're delaying notifications\r\n    subscribe(listener2) {\r\n      const wrappedListener = () => notifying && listener2();\r\n      const unsubscribe = store.subscribe(wrappedListener);\r\n      listeners.add(listener2);\r\n      return () => {\r\n        unsubscribe();\r\n        listeners.delete(listener2);\r\n      };\r\n    },\r\n    // Override the base `store.dispatch` method so that we can check actions\r\n    // for the `shouldAutoBatch` flag and determine if batching is active\r\n    dispatch(action) {\r\n      try {\r\n        notifying = !action?.meta?.[SHOULD_AUTOBATCH];\r\n        shouldNotifyAtEndOfTick = !notifying;\r\n        if (shouldNotifyAtEndOfTick) {\r\n          if (!notificationQueued) {\r\n            notificationQueued = true;\r\n            queueCallback(notifyListeners);\r\n          }\r\n        }\r\n        return store.dispatch(action);\r\n      } finally {\r\n        notifying = true;\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\n// src/getDefaultEnhancers.ts\r\nvar buildGetDefaultEnhancers = (middlewareEnhancer) => function getDefaultEnhancers(options) {\r\n  const {\r\n    autoBatch = true\r\n  } = options ?? {};\r\n  let enhancerArray = new Tuple(middlewareEnhancer);\r\n  if (autoBatch) {\r\n    enhancerArray.push(autoBatchEnhancer(typeof autoBatch === \"object\" ? autoBatch : void 0));\r\n  }\r\n  return enhancerArray;\r\n};\r\n\r\n// src/configureStore.ts\r\nfunction configureStore(options) {\r\n  const getDefaultMiddleware = buildGetDefaultMiddleware();\r\n  const {\r\n    reducer = void 0,\r\n    middleware,\r\n    devTools = true,\r\n    duplicateMiddlewareCheck = true,\r\n    preloadedState = void 0,\r\n    enhancers = void 0\r\n  } = options || {};\r\n  let rootReducer;\r\n  if (typeof reducer === \"function\") {\r\n    rootReducer = reducer;\r\n  } else if ((0,redux__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(reducer)) {\r\n    rootReducer = (0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)(reducer);\r\n  } else {\r\n    throw new Error( false ? 0 : \"`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers\");\r\n  }\r\n  if ( true && middleware && typeof middleware !== \"function\") {\r\n    throw new Error( false ? 0 : \"`middleware` field must be a callback\");\r\n  }\r\n  let finalMiddleware;\r\n  if (typeof middleware === \"function\") {\r\n    finalMiddleware = middleware(getDefaultMiddleware);\r\n    if ( true && !Array.isArray(finalMiddleware)) {\r\n      throw new Error( false ? 0 : \"when using a middleware builder function, an array of middleware must be returned\");\r\n    }\r\n  } else {\r\n    finalMiddleware = getDefaultMiddleware();\r\n  }\r\n  if ( true && finalMiddleware.some((item) => typeof item !== \"function\")) {\r\n    throw new Error( false ? 0 : \"each middleware provided to configureStore must be a function\");\r\n  }\r\n  if ( true && duplicateMiddlewareCheck) {\r\n    let middlewareReferences = /* @__PURE__ */ new Set();\r\n    finalMiddleware.forEach((middleware2) => {\r\n      if (middlewareReferences.has(middleware2)) {\r\n        throw new Error( false ? 0 : \"Duplicate middleware references found when creating the store. Ensure that each middleware is only included once.\");\r\n      }\r\n      middlewareReferences.add(middleware2);\r\n    });\r\n  }\r\n  let finalCompose = redux__WEBPACK_IMPORTED_MODULE_0__.compose;\r\n  if (devTools) {\r\n    finalCompose = composeWithDevTools({\r\n      // Enable capture of stack traces for dispatched Redux actions\r\n      trace: \"development\" !== \"production\",\r\n      ...typeof devTools === \"object\" && devTools\r\n    });\r\n  }\r\n  const middlewareEnhancer = (0,redux__WEBPACK_IMPORTED_MODULE_0__.applyMiddleware)(...finalMiddleware);\r\n  const getDefaultEnhancers = buildGetDefaultEnhancers(middlewareEnhancer);\r\n  if ( true && enhancers && typeof enhancers !== \"function\") {\r\n    throw new Error( false ? 0 : \"`enhancers` field must be a callback\");\r\n  }\r\n  let storeEnhancers = typeof enhancers === \"function\" ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();\r\n  if ( true && !Array.isArray(storeEnhancers)) {\r\n    throw new Error( false ? 0 : \"`enhancers` callback must return an array\");\r\n  }\r\n  if ( true && storeEnhancers.some((item) => typeof item !== \"function\")) {\r\n    throw new Error( false ? 0 : \"each enhancer provided to configureStore must be a function\");\r\n  }\r\n  if ( true && finalMiddleware.length && !storeEnhancers.includes(middlewareEnhancer)) {\r\n    console.error(\"middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`\");\r\n  }\r\n  const composedEnhancer = finalCompose(...storeEnhancers);\r\n  return (0,redux__WEBPACK_IMPORTED_MODULE_0__.createStore)(rootReducer, preloadedState, composedEnhancer);\r\n}\r\n\r\n// src/createReducer.ts\r\n\r\n\r\n// src/mapBuilders.ts\r\nfunction executeReducerBuilderCallback(builderCallback) {\r\n  const actionsMap = {};\r\n  const actionMatchers = [];\r\n  let defaultCaseReducer;\r\n  const builder = {\r\n    addCase(typeOrActionCreator, reducer) {\r\n      if (true) {\r\n        if (actionMatchers.length > 0) {\r\n          throw new Error( false ? 0 : \"`builder.addCase` should only be called before calling `builder.addMatcher`\");\r\n        }\r\n        if (defaultCaseReducer) {\r\n          throw new Error( false ? 0 : \"`builder.addCase` should only be called before calling `builder.addDefaultCase`\");\r\n        }\r\n      }\r\n      const type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\r\n      if (!type) {\r\n        throw new Error( false ? 0 : \"`builder.addCase` cannot be called with an empty action type\");\r\n      }\r\n      if (type in actionsMap) {\r\n        throw new Error( false ? 0 : `\\`builder.addCase\\` cannot be called with two reducers for the same action type '${type}'`);\r\n      }\r\n      actionsMap[type] = reducer;\r\n      return builder;\r\n    },\r\n    addMatcher(matcher, reducer) {\r\n      if (true) {\r\n        if (defaultCaseReducer) {\r\n          throw new Error( false ? 0 : \"`builder.addMatcher` should only be called before calling `builder.addDefaultCase`\");\r\n        }\r\n      }\r\n      actionMatchers.push({\r\n        matcher,\r\n        reducer\r\n      });\r\n      return builder;\r\n    },\r\n    addDefaultCase(reducer) {\r\n      if (true) {\r\n        if (defaultCaseReducer) {\r\n          throw new Error( false ? 0 : \"`builder.addDefaultCase` can only be called once\");\r\n        }\r\n      }\r\n      defaultCaseReducer = reducer;\r\n      return builder;\r\n    }\r\n  };\r\n  builderCallback(builder);\r\n  return [actionsMap, actionMatchers, defaultCaseReducer];\r\n}\r\n\r\n// src/createReducer.ts\r\nfunction isStateFunction(x) {\r\n  return typeof x === \"function\";\r\n}\r\nfunction createReducer(initialState, mapOrBuilderCallback) {\r\n  if (true) {\r\n    if (typeof mapOrBuilderCallback === \"object\") {\r\n      throw new Error( false ? 0 : \"The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer\");\r\n    }\r\n  }\r\n  let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] = executeReducerBuilderCallback(mapOrBuilderCallback);\r\n  let getInitialState;\r\n  if (isStateFunction(initialState)) {\r\n    getInitialState = () => freezeDraftable(initialState());\r\n  } else {\r\n    const frozenInitialState = freezeDraftable(initialState);\r\n    getInitialState = () => frozenInitialState;\r\n  }\r\n  function reducer(state = getInitialState(), action) {\r\n    let caseReducers = [actionsMap[action.type], ...finalActionMatchers.filter(({\r\n      matcher\r\n    }) => matcher(action)).map(({\r\n      reducer: reducer2\r\n    }) => reducer2)];\r\n    if (caseReducers.filter((cr) => !!cr).length === 0) {\r\n      caseReducers = [finalDefaultCaseReducer];\r\n    }\r\n    return caseReducers.reduce((previousState, caseReducer) => {\r\n      if (caseReducer) {\r\n        if ((0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(previousState)) {\r\n          const draft = previousState;\r\n          const result = caseReducer(draft, action);\r\n          if (result === void 0) {\r\n            return previousState;\r\n          }\r\n          return result;\r\n        } else if (!(0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraftable)(previousState)) {\r\n          const result = caseReducer(previousState, action);\r\n          if (result === void 0) {\r\n            if (previousState === null) {\r\n              return previousState;\r\n            }\r\n            throw Error(\"A case reducer on a non-draftable value must not return undefined\");\r\n          }\r\n          return result;\r\n        } else {\r\n          return (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(previousState, (draft) => {\r\n            return caseReducer(draft, action);\r\n          });\r\n        }\r\n      }\r\n      return previousState;\r\n    }, state);\r\n  }\r\n  reducer.getInitialState = getInitialState;\r\n  return reducer;\r\n}\r\n\r\n// src/matchers.ts\r\nvar matches = (matcher, action) => {\r\n  if (hasMatchFunction(matcher)) {\r\n    return matcher.match(action);\r\n  } else {\r\n    return matcher(action);\r\n  }\r\n};\r\nfunction isAnyOf(...matchers) {\r\n  return (action) => {\r\n    return matchers.some((matcher) => matches(matcher, action));\r\n  };\r\n}\r\nfunction isAllOf(...matchers) {\r\n  return (action) => {\r\n    return matchers.every((matcher) => matches(matcher, action));\r\n  };\r\n}\r\nfunction hasExpectedRequestMetadata(action, validStatus) {\r\n  if (!action || !action.meta) return false;\r\n  const hasValidRequestId = typeof action.meta.requestId === \"string\";\r\n  const hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\r\n  return hasValidRequestId && hasValidRequestStatus;\r\n}\r\nfunction isAsyncThunkArray(a) {\r\n  return typeof a[0] === \"function\" && \"pending\" in a[0] && \"fulfilled\" in a[0] && \"rejected\" in a[0];\r\n}\r\nfunction isPending(...asyncThunks) {\r\n  if (asyncThunks.length === 0) {\r\n    return (action) => hasExpectedRequestMetadata(action, [\"pending\"]);\r\n  }\r\n  if (!isAsyncThunkArray(asyncThunks)) {\r\n    return isPending()(asyncThunks[0]);\r\n  }\r\n  return isAnyOf(...asyncThunks.map((asyncThunk) => asyncThunk.pending));\r\n}\r\nfunction isRejected(...asyncThunks) {\r\n  if (asyncThunks.length === 0) {\r\n    return (action) => hasExpectedRequestMetadata(action, [\"rejected\"]);\r\n  }\r\n  if (!isAsyncThunkArray(asyncThunks)) {\r\n    return isRejected()(asyncThunks[0]);\r\n  }\r\n  return isAnyOf(...asyncThunks.map((asyncThunk) => asyncThunk.rejected));\r\n}\r\nfunction isRejectedWithValue(...asyncThunks) {\r\n  const hasFlag = (action) => {\r\n    return action && action.meta && action.meta.rejectedWithValue;\r\n  };\r\n  if (asyncThunks.length === 0) {\r\n    return isAllOf(isRejected(...asyncThunks), hasFlag);\r\n  }\r\n  if (!isAsyncThunkArray(asyncThunks)) {\r\n    return isRejectedWithValue()(asyncThunks[0]);\r\n  }\r\n  return isAllOf(isRejected(...asyncThunks), hasFlag);\r\n}\r\nfunction isFulfilled(...asyncThunks) {\r\n  if (asyncThunks.length === 0) {\r\n    return (action) => hasExpectedRequestMetadata(action, [\"fulfilled\"]);\r\n  }\r\n  if (!isAsyncThunkArray(asyncThunks)) {\r\n    return isFulfilled()(asyncThunks[0]);\r\n  }\r\n  return isAnyOf(...asyncThunks.map((asyncThunk) => asyncThunk.fulfilled));\r\n}\r\nfunction isAsyncThunkAction(...asyncThunks) {\r\n  if (asyncThunks.length === 0) {\r\n    return (action) => hasExpectedRequestMetadata(action, [\"pending\", \"fulfilled\", \"rejected\"]);\r\n  }\r\n  if (!isAsyncThunkArray(asyncThunks)) {\r\n    return isAsyncThunkAction()(asyncThunks[0]);\r\n  }\r\n  return isAnyOf(...asyncThunks.flatMap((asyncThunk) => [asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled]));\r\n}\r\n\r\n// src/nanoid.ts\r\nvar urlAlphabet = \"ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW\";\r\nvar nanoid = (size = 21) => {\r\n  let id = \"\";\r\n  let i = size;\r\n  while (i--) {\r\n    id += urlAlphabet[Math.random() * 64 | 0];\r\n  }\r\n  return id;\r\n};\r\n\r\n// src/createAsyncThunk.ts\r\nvar commonProperties = [\"name\", \"message\", \"stack\", \"code\"];\r\nvar RejectWithValue = class {\r\n  constructor(payload, meta) {\r\n    this.payload = payload;\r\n    this.meta = meta;\r\n  }\r\n  /*\r\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\r\n  does not exist at runtime\r\n  */\r\n  _type;\r\n};\r\nvar FulfillWithMeta = class {\r\n  constructor(payload, meta) {\r\n    this.payload = payload;\r\n    this.meta = meta;\r\n  }\r\n  /*\r\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\r\n  does not exist at runtime\r\n  */\r\n  _type;\r\n};\r\nvar miniSerializeError = (value) => {\r\n  if (typeof value === \"object\" && value !== null) {\r\n    const simpleError = {};\r\n    for (const property of commonProperties) {\r\n      if (typeof value[property] === \"string\") {\r\n        simpleError[property] = value[property];\r\n      }\r\n    }\r\n    return simpleError;\r\n  }\r\n  return {\r\n    message: String(value)\r\n  };\r\n};\r\nvar externalAbortMessage = \"External signal was aborted\";\r\nvar createAsyncThunk = /* @__PURE__ */ (() => {\r\n  function createAsyncThunk2(typePrefix, payloadCreator, options) {\r\n    const fulfilled = createAction(typePrefix + \"/fulfilled\", (payload, requestId, arg, meta) => ({\r\n      payload,\r\n      meta: {\r\n        ...meta || {},\r\n        arg,\r\n        requestId,\r\n        requestStatus: \"fulfilled\"\r\n      }\r\n    }));\r\n    const pending = createAction(typePrefix + \"/pending\", (requestId, arg, meta) => ({\r\n      payload: void 0,\r\n      meta: {\r\n        ...meta || {},\r\n        arg,\r\n        requestId,\r\n        requestStatus: \"pending\"\r\n      }\r\n    }));\r\n    const rejected = createAction(typePrefix + \"/rejected\", (error, requestId, arg, payload, meta) => ({\r\n      payload,\r\n      error: (options && options.serializeError || miniSerializeError)(error || \"Rejected\"),\r\n      meta: {\r\n        ...meta || {},\r\n        arg,\r\n        requestId,\r\n        rejectedWithValue: !!payload,\r\n        requestStatus: \"rejected\",\r\n        aborted: error?.name === \"AbortError\",\r\n        condition: error?.name === \"ConditionError\"\r\n      }\r\n    }));\r\n    function actionCreator(arg, {\r\n      signal\r\n    } = {}) {\r\n      return (dispatch, getState, extra) => {\r\n        const requestId = options?.idGenerator ? options.idGenerator(arg) : nanoid();\r\n        const abortController = new AbortController();\r\n        let abortHandler;\r\n        let abortReason;\r\n        function abort(reason) {\r\n          abortReason = reason;\r\n          abortController.abort();\r\n        }\r\n        if (signal) {\r\n          if (signal.aborted) {\r\n            abort(externalAbortMessage);\r\n          } else {\r\n            signal.addEventListener(\"abort\", () => abort(externalAbortMessage), {\r\n              once: true\r\n            });\r\n          }\r\n        }\r\n        const promise = async function() {\r\n          let finalAction;\r\n          try {\r\n            let conditionResult = options?.condition?.(arg, {\r\n              getState,\r\n              extra\r\n            });\r\n            if (isThenable(conditionResult)) {\r\n              conditionResult = await conditionResult;\r\n            }\r\n            if (conditionResult === false || abortController.signal.aborted) {\r\n              throw {\r\n                name: \"ConditionError\",\r\n                message: \"Aborted due to condition callback returning false.\"\r\n              };\r\n            }\r\n            const abortedPromise = new Promise((_, reject) => {\r\n              abortHandler = () => {\r\n                reject({\r\n                  name: \"AbortError\",\r\n                  message: abortReason || \"Aborted\"\r\n                });\r\n              };\r\n              abortController.signal.addEventListener(\"abort\", abortHandler);\r\n            });\r\n            dispatch(pending(requestId, arg, options?.getPendingMeta?.({\r\n              requestId,\r\n              arg\r\n            }, {\r\n              getState,\r\n              extra\r\n            })));\r\n            finalAction = await Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {\r\n              dispatch,\r\n              getState,\r\n              extra,\r\n              requestId,\r\n              signal: abortController.signal,\r\n              abort,\r\n              rejectWithValue: (value, meta) => {\r\n                return new RejectWithValue(value, meta);\r\n              },\r\n              fulfillWithValue: (value, meta) => {\r\n                return new FulfillWithMeta(value, meta);\r\n              }\r\n            })).then((result) => {\r\n              if (result instanceof RejectWithValue) {\r\n                throw result;\r\n              }\r\n              if (result instanceof FulfillWithMeta) {\r\n                return fulfilled(result.payload, requestId, arg, result.meta);\r\n              }\r\n              return fulfilled(result, requestId, arg);\r\n            })]);\r\n          } catch (err) {\r\n            finalAction = err instanceof RejectWithValue ? rejected(null, requestId, arg, err.payload, err.meta) : rejected(err, requestId, arg);\r\n          } finally {\r\n            if (abortHandler) {\r\n              abortController.signal.removeEventListener(\"abort\", abortHandler);\r\n            }\r\n          }\r\n          const skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\r\n          if (!skipDispatch) {\r\n            dispatch(finalAction);\r\n          }\r\n          return finalAction;\r\n        }();\r\n        return Object.assign(promise, {\r\n          abort,\r\n          requestId,\r\n          arg,\r\n          unwrap() {\r\n            return promise.then(unwrapResult);\r\n          }\r\n        });\r\n      };\r\n    }\r\n    return Object.assign(actionCreator, {\r\n      pending,\r\n      rejected,\r\n      fulfilled,\r\n      settled: isAnyOf(rejected, fulfilled),\r\n      typePrefix\r\n    });\r\n  }\r\n  createAsyncThunk2.withTypes = () => createAsyncThunk2;\r\n  return createAsyncThunk2;\r\n})();\r\nfunction unwrapResult(action) {\r\n  if (action.meta && action.meta.rejectedWithValue) {\r\n    throw action.payload;\r\n  }\r\n  if (action.error) {\r\n    throw action.error;\r\n  }\r\n  return action.payload;\r\n}\r\nfunction isThenable(value) {\r\n  return value !== null && typeof value === \"object\" && typeof value.then === \"function\";\r\n}\r\n\r\n// src/createSlice.ts\r\nvar asyncThunkSymbol = /* @__PURE__ */ Symbol.for(\"rtk-slice-createasyncthunk\");\r\nvar asyncThunkCreator = {\r\n  [asyncThunkSymbol]: createAsyncThunk\r\n};\r\nvar ReducerType = /* @__PURE__ */ ((ReducerType2) => {\r\n  ReducerType2[\"reducer\"] = \"reducer\";\r\n  ReducerType2[\"reducerWithPrepare\"] = \"reducerWithPrepare\";\r\n  ReducerType2[\"asyncThunk\"] = \"asyncThunk\";\r\n  return ReducerType2;\r\n})(ReducerType || {});\r\nfunction getType(slice, actionKey) {\r\n  return `${slice}/${actionKey}`;\r\n}\r\nfunction buildCreateSlice({\r\n  creators\r\n} = {}) {\r\n  const cAT = creators?.asyncThunk?.[asyncThunkSymbol];\r\n  return function createSlice2(options) {\r\n    const {\r\n      name,\r\n      reducerPath = name\r\n    } = options;\r\n    if (!name) {\r\n      throw new Error( false ? 0 : \"`name` is a required option for createSlice\");\r\n    }\r\n    if (typeof process !== \"undefined\" && \"development\" === \"development\") {\r\n      if (options.initialState === void 0) {\r\n        console.error(\"You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`\");\r\n      }\r\n    }\r\n    const reducers = (typeof options.reducers === \"function\" ? options.reducers(buildReducerCreators()) : options.reducers) || {};\r\n    const reducerNames = Object.keys(reducers);\r\n    const context = {\r\n      sliceCaseReducersByName: {},\r\n      sliceCaseReducersByType: {},\r\n      actionCreators: {},\r\n      sliceMatchers: []\r\n    };\r\n    const contextMethods = {\r\n      addCase(typeOrActionCreator, reducer2) {\r\n        const type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\r\n        if (!type) {\r\n          throw new Error( false ? 0 : \"`context.addCase` cannot be called with an empty action type\");\r\n        }\r\n        if (type in context.sliceCaseReducersByType) {\r\n          throw new Error( false ? 0 : \"`context.addCase` cannot be called with two reducers for the same action type: \" + type);\r\n        }\r\n        context.sliceCaseReducersByType[type] = reducer2;\r\n        return contextMethods;\r\n      },\r\n      addMatcher(matcher, reducer2) {\r\n        context.sliceMatchers.push({\r\n          matcher,\r\n          reducer: reducer2\r\n        });\r\n        return contextMethods;\r\n      },\r\n      exposeAction(name2, actionCreator) {\r\n        context.actionCreators[name2] = actionCreator;\r\n        return contextMethods;\r\n      },\r\n      exposeCaseReducer(name2, reducer2) {\r\n        context.sliceCaseReducersByName[name2] = reducer2;\r\n        return contextMethods;\r\n      }\r\n    };\r\n    reducerNames.forEach((reducerName) => {\r\n      const reducerDefinition = reducers[reducerName];\r\n      const reducerDetails = {\r\n        reducerName,\r\n        type: getType(name, reducerName),\r\n        createNotation: typeof options.reducers === \"function\"\r\n      };\r\n      if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {\r\n        handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);\r\n      } else {\r\n        handleNormalReducerDefinition(reducerDetails, reducerDefinition, contextMethods);\r\n      }\r\n    });\r\n    function buildReducer() {\r\n      if (true) {\r\n        if (typeof options.extraReducers === \"object\") {\r\n          throw new Error( false ? 0 : \"The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice\");\r\n        }\r\n      }\r\n      const [extraReducers = {}, actionMatchers = [], defaultCaseReducer = void 0] = typeof options.extraReducers === \"function\" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers];\r\n      const finalCaseReducers = {\r\n        ...extraReducers,\r\n        ...context.sliceCaseReducersByType\r\n      };\r\n      return createReducer(options.initialState, (builder) => {\r\n        for (let key in finalCaseReducers) {\r\n          builder.addCase(key, finalCaseReducers[key]);\r\n        }\r\n        for (let sM of context.sliceMatchers) {\r\n          builder.addMatcher(sM.matcher, sM.reducer);\r\n        }\r\n        for (let m of actionMatchers) {\r\n          builder.addMatcher(m.matcher, m.reducer);\r\n        }\r\n        if (defaultCaseReducer) {\r\n          builder.addDefaultCase(defaultCaseReducer);\r\n        }\r\n      });\r\n    }\r\n    const selectSelf = (state) => state;\r\n    const injectedSelectorCache = /* @__PURE__ */ new Map();\r\n    const injectedStateCache = /* @__PURE__ */ new WeakMap();\r\n    let _reducer;\r\n    function reducer(state, action) {\r\n      if (!_reducer) _reducer = buildReducer();\r\n      return _reducer(state, action);\r\n    }\r\n    function getInitialState() {\r\n      if (!_reducer) _reducer = buildReducer();\r\n      return _reducer.getInitialState();\r\n    }\r\n    function makeSelectorProps(reducerPath2, injected = false) {\r\n      function selectSlice(state) {\r\n        let sliceState = state[reducerPath2];\r\n        if (typeof sliceState === \"undefined\") {\r\n          if (injected) {\r\n            sliceState = getOrInsertComputed(injectedStateCache, selectSlice, getInitialState);\r\n          } else if (true) {\r\n            throw new Error( false ? 0 : \"selectSlice returned undefined for an uninjected slice reducer\");\r\n          }\r\n        }\r\n        return sliceState;\r\n      }\r\n      function getSelectors(selectState = selectSelf) {\r\n        const selectorCache = getOrInsertComputed(injectedSelectorCache, injected, () => /* @__PURE__ */ new WeakMap());\r\n        return getOrInsertComputed(selectorCache, selectState, () => {\r\n          const map = {};\r\n          for (const [name2, selector] of Object.entries(options.selectors ?? {})) {\r\n            map[name2] = wrapSelector(selector, selectState, () => getOrInsertComputed(injectedStateCache, selectState, getInitialState), injected);\r\n          }\r\n          return map;\r\n        });\r\n      }\r\n      return {\r\n        reducerPath: reducerPath2,\r\n        getSelectors,\r\n        get selectors() {\r\n          return getSelectors(selectSlice);\r\n        },\r\n        selectSlice\r\n      };\r\n    }\r\n    const slice = {\r\n      name,\r\n      reducer,\r\n      actions: context.actionCreators,\r\n      caseReducers: context.sliceCaseReducersByName,\r\n      getInitialState,\r\n      ...makeSelectorProps(reducerPath),\r\n      injectInto(injectable, {\r\n        reducerPath: pathOpt,\r\n        ...config\r\n      } = {}) {\r\n        const newReducerPath = pathOpt ?? reducerPath;\r\n        injectable.inject({\r\n          reducerPath: newReducerPath,\r\n          reducer\r\n        }, config);\r\n        return {\r\n          ...slice,\r\n          ...makeSelectorProps(newReducerPath, true)\r\n        };\r\n      }\r\n    };\r\n    return slice;\r\n  };\r\n}\r\nfunction wrapSelector(selector, selectState, getInitialState, injected) {\r\n  function wrapper(rootState, ...args) {\r\n    let sliceState = selectState(rootState);\r\n    if (typeof sliceState === \"undefined\") {\r\n      if (injected) {\r\n        sliceState = getInitialState();\r\n      } else if (true) {\r\n        throw new Error( false ? 0 : \"selectState returned undefined for an uninjected slice reducer\");\r\n      }\r\n    }\r\n    return selector(sliceState, ...args);\r\n  }\r\n  wrapper.unwrapped = selector;\r\n  return wrapper;\r\n}\r\nvar createSlice = /* @__PURE__ */ buildCreateSlice();\r\nfunction buildReducerCreators() {\r\n  function asyncThunk(payloadCreator, config) {\r\n    return {\r\n      _reducerDefinitionType: \"asyncThunk\" /* asyncThunk */,\r\n      payloadCreator,\r\n      ...config\r\n    };\r\n  }\r\n  asyncThunk.withTypes = () => asyncThunk;\r\n  return {\r\n    reducer(caseReducer) {\r\n      return Object.assign({\r\n        // hack so the wrapping function has the same name as the original\r\n        // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original\r\n        [caseReducer.name](...args) {\r\n          return caseReducer(...args);\r\n        }\r\n      }[caseReducer.name], {\r\n        _reducerDefinitionType: \"reducer\" /* reducer */\r\n      });\r\n    },\r\n    preparedReducer(prepare, reducer) {\r\n      return {\r\n        _reducerDefinitionType: \"reducerWithPrepare\" /* reducerWithPrepare */,\r\n        prepare,\r\n        reducer\r\n      };\r\n    },\r\n    asyncThunk\r\n  };\r\n}\r\nfunction handleNormalReducerDefinition({\r\n  type,\r\n  reducerName,\r\n  createNotation\r\n}, maybeReducerWithPrepare, context) {\r\n  let caseReducer;\r\n  let prepareCallback;\r\n  if (\"reducer\" in maybeReducerWithPrepare) {\r\n    if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {\r\n      throw new Error( false ? 0 : \"Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.\");\r\n    }\r\n    caseReducer = maybeReducerWithPrepare.reducer;\r\n    prepareCallback = maybeReducerWithPrepare.prepare;\r\n  } else {\r\n    caseReducer = maybeReducerWithPrepare;\r\n  }\r\n  context.addCase(type, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type, prepareCallback) : createAction(type));\r\n}\r\nfunction isAsyncThunkSliceReducerDefinition(reducerDefinition) {\r\n  return reducerDefinition._reducerDefinitionType === \"asyncThunk\" /* asyncThunk */;\r\n}\r\nfunction isCaseReducerWithPrepareDefinition(reducerDefinition) {\r\n  return reducerDefinition._reducerDefinitionType === \"reducerWithPrepare\" /* reducerWithPrepare */;\r\n}\r\nfunction handleThunkCaseReducerDefinition({\r\n  type,\r\n  reducerName\r\n}, reducerDefinition, context, cAT) {\r\n  if (!cAT) {\r\n    throw new Error( false ? 0 : \"Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.\");\r\n  }\r\n  const {\r\n    payloadCreator,\r\n    fulfilled,\r\n    pending,\r\n    rejected,\r\n    settled,\r\n    options\r\n  } = reducerDefinition;\r\n  const thunk = cAT(type, payloadCreator, options);\r\n  context.exposeAction(reducerName, thunk);\r\n  if (fulfilled) {\r\n    context.addCase(thunk.fulfilled, fulfilled);\r\n  }\r\n  if (pending) {\r\n    context.addCase(thunk.pending, pending);\r\n  }\r\n  if (rejected) {\r\n    context.addCase(thunk.rejected, rejected);\r\n  }\r\n  if (settled) {\r\n    context.addMatcher(thunk.settled, settled);\r\n  }\r\n  context.exposeCaseReducer(reducerName, {\r\n    fulfilled: fulfilled || noop,\r\n    pending: pending || noop,\r\n    rejected: rejected || noop,\r\n    settled: settled || noop\r\n  });\r\n}\r\nfunction noop() {\r\n}\r\n\r\n// src/entities/entity_state.ts\r\nfunction getInitialEntityState() {\r\n  return {\r\n    ids: [],\r\n    entities: {}\r\n  };\r\n}\r\nfunction createInitialStateFactory(stateAdapter) {\r\n  function getInitialState(additionalState = {}, entities) {\r\n    const state = Object.assign(getInitialEntityState(), additionalState);\r\n    return entities ? stateAdapter.setAll(state, entities) : state;\r\n  }\r\n  return {\r\n    getInitialState\r\n  };\r\n}\r\n\r\n// src/entities/state_selectors.ts\r\nfunction createSelectorsFactory() {\r\n  function getSelectors(selectState, options = {}) {\r\n    const {\r\n      createSelector: createSelector2 = createDraftSafeSelector\r\n    } = options;\r\n    const selectIds = (state) => state.ids;\r\n    const selectEntities = (state) => state.entities;\r\n    const selectAll = createSelector2(selectIds, selectEntities, (ids, entities) => ids.map((id) => entities[id]));\r\n    const selectId = (_, id) => id;\r\n    const selectById = (entities, id) => entities[id];\r\n    const selectTotal = createSelector2(selectIds, (ids) => ids.length);\r\n    if (!selectState) {\r\n      return {\r\n        selectIds,\r\n        selectEntities,\r\n        selectAll,\r\n        selectTotal,\r\n        selectById: createSelector2(selectEntities, selectId, selectById)\r\n      };\r\n    }\r\n    const selectGlobalizedEntities = createSelector2(selectState, selectEntities);\r\n    return {\r\n      selectIds: createSelector2(selectState, selectIds),\r\n      selectEntities: selectGlobalizedEntities,\r\n      selectAll: createSelector2(selectState, selectAll),\r\n      selectTotal: createSelector2(selectState, selectTotal),\r\n      selectById: createSelector2(selectGlobalizedEntities, selectId, selectById)\r\n    };\r\n  }\r\n  return {\r\n    getSelectors\r\n  };\r\n}\r\n\r\n// src/entities/state_adapter.ts\r\n\r\nvar isDraftTyped = immer__WEBPACK_IMPORTED_MODULE_2__.isDraft;\r\nfunction createSingleArgumentStateOperator(mutator) {\r\n  const operator = createStateOperator((_, state) => mutator(state));\r\n  return function operation(state) {\r\n    return operator(state, void 0);\r\n  };\r\n}\r\nfunction createStateOperator(mutator) {\r\n  return function operation(state, arg) {\r\n    function isPayloadActionArgument(arg2) {\r\n      return isFSA(arg2);\r\n    }\r\n    const runMutator = (draft) => {\r\n      if (isPayloadActionArgument(arg)) {\r\n        mutator(arg.payload, draft);\r\n      } else {\r\n        mutator(arg, draft);\r\n      }\r\n    };\r\n    if (isDraftTyped(state)) {\r\n      runMutator(state);\r\n      return state;\r\n    }\r\n    return (0,immer__WEBPACK_IMPORTED_MODULE_2__.produce)(state, runMutator);\r\n  };\r\n}\r\n\r\n// src/entities/utils.ts\r\n\r\nfunction selectIdValue(entity, selectId) {\r\n  const key = selectId(entity);\r\n  if ( true && key === void 0) {\r\n    console.warn(\"The entity passed to the `selectId` implementation returned undefined.\", \"You should probably provide your own `selectId` implementation.\", \"The entity that was passed:\", entity, \"The `selectId` implementation:\", selectId.toString());\r\n  }\r\n  return key;\r\n}\r\nfunction ensureEntitiesArray(entities) {\r\n  if (!Array.isArray(entities)) {\r\n    entities = Object.values(entities);\r\n  }\r\n  return entities;\r\n}\r\nfunction getCurrent(value) {\r\n  return (0,immer__WEBPACK_IMPORTED_MODULE_2__.isDraft)(value) ? (0,immer__WEBPACK_IMPORTED_MODULE_2__.current)(value) : value;\r\n}\r\nfunction splitAddedUpdatedEntities(newEntities, selectId, state) {\r\n  newEntities = ensureEntitiesArray(newEntities);\r\n  const existingIdsArray = getCurrent(state.ids);\r\n  const existingIds = new Set(existingIdsArray);\r\n  const added = [];\r\n  const addedIds = /* @__PURE__ */ new Set([]);\r\n  const updated = [];\r\n  for (const entity of newEntities) {\r\n    const id = selectIdValue(entity, selectId);\r\n    if (existingIds.has(id) || addedIds.has(id)) {\r\n      updated.push({\r\n        id,\r\n        changes: entity\r\n      });\r\n    } else {\r\n      addedIds.add(id);\r\n      added.push(entity);\r\n    }\r\n  }\r\n  return [added, updated, existingIdsArray];\r\n}\r\n\r\n// src/entities/unsorted_state_adapter.ts\r\nfunction createUnsortedStateAdapter(selectId) {\r\n  function addOneMutably(entity, state) {\r\n    const key = selectIdValue(entity, selectId);\r\n    if (key in state.entities) {\r\n      return;\r\n    }\r\n    state.ids.push(key);\r\n    state.entities[key] = entity;\r\n  }\r\n  function addManyMutably(newEntities, state) {\r\n    newEntities = ensureEntitiesArray(newEntities);\r\n    for (const entity of newEntities) {\r\n      addOneMutably(entity, state);\r\n    }\r\n  }\r\n  function setOneMutably(entity, state) {\r\n    const key = selectIdValue(entity, selectId);\r\n    if (!(key in state.entities)) {\r\n      state.ids.push(key);\r\n    }\r\n    ;\r\n    state.entities[key] = entity;\r\n  }\r\n  function setManyMutably(newEntities, state) {\r\n    newEntities = ensureEntitiesArray(newEntities);\r\n    for (const entity of newEntities) {\r\n      setOneMutably(entity, state);\r\n    }\r\n  }\r\n  function setAllMutably(newEntities, state) {\r\n    newEntities = ensureEntitiesArray(newEntities);\r\n    state.ids = [];\r\n    state.entities = {};\r\n    addManyMutably(newEntities, state);\r\n  }\r\n  function removeOneMutably(key, state) {\r\n    return removeManyMutably([key], state);\r\n  }\r\n  function removeManyMutably(keys, state) {\r\n    let didMutate = false;\r\n    keys.forEach((key) => {\r\n      if (key in state.entities) {\r\n        delete state.entities[key];\r\n        didMutate = true;\r\n      }\r\n    });\r\n    if (didMutate) {\r\n      state.ids = state.ids.filter((id) => id in state.entities);\r\n    }\r\n  }\r\n  function removeAllMutably(state) {\r\n    Object.assign(state, {\r\n      ids: [],\r\n      entities: {}\r\n    });\r\n  }\r\n  function takeNewKey(keys, update, state) {\r\n    const original3 = state.entities[update.id];\r\n    if (original3 === void 0) {\r\n      return false;\r\n    }\r\n    const updated = Object.assign({}, original3, update.changes);\r\n    const newKey = selectIdValue(updated, selectId);\r\n    const hasNewKey = newKey !== update.id;\r\n    if (hasNewKey) {\r\n      keys[update.id] = newKey;\r\n      delete state.entities[update.id];\r\n    }\r\n    ;\r\n    state.entities[newKey] = updated;\r\n    return hasNewKey;\r\n  }\r\n  function updateOneMutably(update, state) {\r\n    return updateManyMutably([update], state);\r\n  }\r\n  function updateManyMutably(updates, state) {\r\n    const newKeys = {};\r\n    const updatesPerEntity = {};\r\n    updates.forEach((update) => {\r\n      if (update.id in state.entities) {\r\n        updatesPerEntity[update.id] = {\r\n          id: update.id,\r\n          // Spreads ignore falsy values, so this works even if there isn't\r\n          // an existing update already at this key\r\n          changes: {\r\n            ...updatesPerEntity[update.id]?.changes,\r\n            ...update.changes\r\n          }\r\n        };\r\n      }\r\n    });\r\n    updates = Object.values(updatesPerEntity);\r\n    const didMutateEntities = updates.length > 0;\r\n    if (didMutateEntities) {\r\n      const didMutateIds = updates.filter((update) => takeNewKey(newKeys, update, state)).length > 0;\r\n      if (didMutateIds) {\r\n        state.ids = Object.values(state.entities).map((e) => selectIdValue(e, selectId));\r\n      }\r\n    }\r\n  }\r\n  function upsertOneMutably(entity, state) {\r\n    return upsertManyMutably([entity], state);\r\n  }\r\n  function upsertManyMutably(newEntities, state) {\r\n    const [added, updated] = splitAddedUpdatedEntities(newEntities, selectId, state);\r\n    addManyMutably(added, state);\r\n    updateManyMutably(updated, state);\r\n  }\r\n  return {\r\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\r\n    addOne: createStateOperator(addOneMutably),\r\n    addMany: createStateOperator(addManyMutably),\r\n    setOne: createStateOperator(setOneMutably),\r\n    setMany: createStateOperator(setManyMutably),\r\n    setAll: createStateOperator(setAllMutably),\r\n    updateOne: createStateOperator(updateOneMutably),\r\n    updateMany: createStateOperator(updateManyMutably),\r\n    upsertOne: createStateOperator(upsertOneMutably),\r\n    upsertMany: createStateOperator(upsertManyMutably),\r\n    removeOne: createStateOperator(removeOneMutably),\r\n    removeMany: createStateOperator(removeManyMutably)\r\n  };\r\n}\r\n\r\n// src/entities/sorted_state_adapter.ts\r\nfunction findInsertIndex(sortedItems, item, comparisonFunction) {\r\n  let lowIndex = 0;\r\n  let highIndex = sortedItems.length;\r\n  while (lowIndex < highIndex) {\r\n    let middleIndex = lowIndex + highIndex >>> 1;\r\n    const currentItem = sortedItems[middleIndex];\r\n    const res = comparisonFunction(item, currentItem);\r\n    if (res >= 0) {\r\n      lowIndex = middleIndex + 1;\r\n    } else {\r\n      highIndex = middleIndex;\r\n    }\r\n  }\r\n  return lowIndex;\r\n}\r\nfunction insert(sortedItems, item, comparisonFunction) {\r\n  const insertAtIndex = findInsertIndex(sortedItems, item, comparisonFunction);\r\n  sortedItems.splice(insertAtIndex, 0, item);\r\n  return sortedItems;\r\n}\r\nfunction createSortedStateAdapter(selectId, comparer) {\r\n  const {\r\n    removeOne,\r\n    removeMany,\r\n    removeAll\r\n  } = createUnsortedStateAdapter(selectId);\r\n  function addOneMutably(entity, state) {\r\n    return addManyMutably([entity], state);\r\n  }\r\n  function addManyMutably(newEntities, state, existingIds) {\r\n    newEntities = ensureEntitiesArray(newEntities);\r\n    const existingKeys = new Set(existingIds ?? getCurrent(state.ids));\r\n    const models = newEntities.filter((model) => !existingKeys.has(selectIdValue(model, selectId)));\r\n    if (models.length !== 0) {\r\n      mergeFunction(state, models);\r\n    }\r\n  }\r\n  function setOneMutably(entity, state) {\r\n    return setManyMutably([entity], state);\r\n  }\r\n  function setManyMutably(newEntities, state) {\r\n    newEntities = ensureEntitiesArray(newEntities);\r\n    if (newEntities.length !== 0) {\r\n      for (const item of newEntities) {\r\n        delete state.entities[selectId(item)];\r\n      }\r\n      mergeFunction(state, newEntities);\r\n    }\r\n  }\r\n  function setAllMutably(newEntities, state) {\r\n    newEntities = ensureEntitiesArray(newEntities);\r\n    state.entities = {};\r\n    state.ids = [];\r\n    addManyMutably(newEntities, state, []);\r\n  }\r\n  function updateOneMutably(update, state) {\r\n    return updateManyMutably([update], state);\r\n  }\r\n  function updateManyMutably(updates, state) {\r\n    let appliedUpdates = false;\r\n    let replacedIds = false;\r\n    for (let update of updates) {\r\n      const entity = state.entities[update.id];\r\n      if (!entity) {\r\n        continue;\r\n      }\r\n      appliedUpdates = true;\r\n      Object.assign(entity, update.changes);\r\n      const newId = selectId(entity);\r\n      if (update.id !== newId) {\r\n        replacedIds = true;\r\n        delete state.entities[update.id];\r\n        const oldIndex = state.ids.indexOf(update.id);\r\n        state.ids[oldIndex] = newId;\r\n        state.entities[newId] = entity;\r\n      }\r\n    }\r\n    if (appliedUpdates) {\r\n      mergeFunction(state, [], appliedUpdates, replacedIds);\r\n    }\r\n  }\r\n  function upsertOneMutably(entity, state) {\r\n    return upsertManyMutably([entity], state);\r\n  }\r\n  function upsertManyMutably(newEntities, state) {\r\n    const [added, updated, existingIdsArray] = splitAddedUpdatedEntities(newEntities, selectId, state);\r\n    if (added.length) {\r\n      addManyMutably(added, state, existingIdsArray);\r\n    }\r\n    if (updated.length) {\r\n      updateManyMutably(updated, state);\r\n    }\r\n  }\r\n  function areArraysEqual(a, b) {\r\n    if (a.length !== b.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < a.length; i++) {\r\n      if (a[i] === b[i]) {\r\n        continue;\r\n      }\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  const mergeFunction = (state, addedItems, appliedUpdates, replacedIds) => {\r\n    const currentEntities = getCurrent(state.entities);\r\n    const currentIds = getCurrent(state.ids);\r\n    const stateEntities = state.entities;\r\n    let ids = currentIds;\r\n    if (replacedIds) {\r\n      ids = new Set(currentIds);\r\n    }\r\n    let sortedEntities = [];\r\n    for (const id of ids) {\r\n      const entity = currentEntities[id];\r\n      if (entity) {\r\n        sortedEntities.push(entity);\r\n      }\r\n    }\r\n    const wasPreviouslyEmpty = sortedEntities.length === 0;\r\n    for (const item of addedItems) {\r\n      stateEntities[selectId(item)] = item;\r\n      if (!wasPreviouslyEmpty) {\r\n        insert(sortedEntities, item, comparer);\r\n      }\r\n    }\r\n    if (wasPreviouslyEmpty) {\r\n      sortedEntities = addedItems.slice().sort(comparer);\r\n    } else if (appliedUpdates) {\r\n      sortedEntities.sort(comparer);\r\n    }\r\n    const newSortedIds = sortedEntities.map(selectId);\r\n    if (!areArraysEqual(currentIds, newSortedIds)) {\r\n      state.ids = newSortedIds;\r\n    }\r\n  };\r\n  return {\r\n    removeOne,\r\n    removeMany,\r\n    removeAll,\r\n    addOne: createStateOperator(addOneMutably),\r\n    updateOne: createStateOperator(updateOneMutably),\r\n    upsertOne: createStateOperator(upsertOneMutably),\r\n    setOne: createStateOperator(setOneMutably),\r\n    setMany: createStateOperator(setManyMutably),\r\n    setAll: createStateOperator(setAllMutably),\r\n    addMany: createStateOperator(addManyMutably),\r\n    updateMany: createStateOperator(updateManyMutably),\r\n    upsertMany: createStateOperator(upsertManyMutably)\r\n  };\r\n}\r\n\r\n// src/entities/create_adapter.ts\r\nfunction createEntityAdapter(options = {}) {\r\n  const {\r\n    selectId,\r\n    sortComparer\r\n  } = {\r\n    sortComparer: false,\r\n    selectId: (instance) => instance.id,\r\n    ...options\r\n  };\r\n  const stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\r\n  const stateFactory = createInitialStateFactory(stateAdapter);\r\n  const selectorsFactory = createSelectorsFactory();\r\n  return {\r\n    selectId,\r\n    sortComparer,\r\n    ...stateFactory,\r\n    ...selectorsFactory,\r\n    ...stateAdapter\r\n  };\r\n}\r\n\r\n// src/listenerMiddleware/index.ts\r\n\r\n\r\n// src/listenerMiddleware/exceptions.ts\r\nvar task = \"task\";\r\nvar listener = \"listener\";\r\nvar completed = \"completed\";\r\nvar cancelled = \"cancelled\";\r\nvar taskCancelled = `task-${cancelled}`;\r\nvar taskCompleted = `task-${completed}`;\r\nvar listenerCancelled = `${listener}-${cancelled}`;\r\nvar listenerCompleted = `${listener}-${completed}`;\r\nvar TaskAbortError = class {\r\n  constructor(code) {\r\n    this.code = code;\r\n    this.message = `${task} ${cancelled} (reason: ${code})`;\r\n  }\r\n  name = \"TaskAbortError\";\r\n  message;\r\n};\r\n\r\n// src/listenerMiddleware/utils.ts\r\nvar assertFunction = (func, expected) => {\r\n  if (typeof func !== \"function\") {\r\n    throw new TypeError( false ? 0 : `${expected} is not a function`);\r\n  }\r\n};\r\nvar noop2 = () => {\r\n};\r\nvar catchRejection = (promise, onError = noop2) => {\r\n  promise.catch(onError);\r\n  return promise;\r\n};\r\nvar addAbortSignalListener = (abortSignal, callback) => {\r\n  abortSignal.addEventListener(\"abort\", callback, {\r\n    once: true\r\n  });\r\n  return () => abortSignal.removeEventListener(\"abort\", callback);\r\n};\r\nvar abortControllerWithReason = (abortController, reason) => {\r\n  const signal = abortController.signal;\r\n  if (signal.aborted) {\r\n    return;\r\n  }\r\n  if (!(\"reason\" in signal)) {\r\n    Object.defineProperty(signal, \"reason\", {\r\n      enumerable: true,\r\n      value: reason,\r\n      configurable: true,\r\n      writable: true\r\n    });\r\n  }\r\n  ;\r\n  abortController.abort(reason);\r\n};\r\n\r\n// src/listenerMiddleware/task.ts\r\nvar validateActive = (signal) => {\r\n  if (signal.aborted) {\r\n    const {\r\n      reason\r\n    } = signal;\r\n    throw new TaskAbortError(reason);\r\n  }\r\n};\r\nfunction raceWithSignal(signal, promise) {\r\n  let cleanup = noop2;\r\n  return new Promise((resolve, reject) => {\r\n    const notifyRejection = () => reject(new TaskAbortError(signal.reason));\r\n    if (signal.aborted) {\r\n      notifyRejection();\r\n      return;\r\n    }\r\n    cleanup = addAbortSignalListener(signal, notifyRejection);\r\n    promise.finally(() => cleanup()).then(resolve, reject);\r\n  }).finally(() => {\r\n    cleanup = noop2;\r\n  });\r\n}\r\nvar runTask = async (task2, cleanUp) => {\r\n  try {\r\n    await Promise.resolve();\r\n    const value = await task2();\r\n    return {\r\n      status: \"ok\",\r\n      value\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: error instanceof TaskAbortError ? \"cancelled\" : \"rejected\",\r\n      error\r\n    };\r\n  } finally {\r\n    cleanUp?.();\r\n  }\r\n};\r\nvar createPause = (signal) => {\r\n  return (promise) => {\r\n    return catchRejection(raceWithSignal(signal, promise).then((output) => {\r\n      validateActive(signal);\r\n      return output;\r\n    }));\r\n  };\r\n};\r\nvar createDelay = (signal) => {\r\n  const pause = createPause(signal);\r\n  return (timeoutMs) => {\r\n    return pause(new Promise((resolve) => setTimeout(resolve, timeoutMs)));\r\n  };\r\n};\r\n\r\n// src/listenerMiddleware/index.ts\r\nvar {\r\n  assign\r\n} = Object;\r\nvar INTERNAL_NIL_TOKEN = {};\r\nvar alm = \"listenerMiddleware\";\r\nvar createFork = (parentAbortSignal, parentBlockingPromises) => {\r\n  const linkControllers = (controller) => addAbortSignalListener(parentAbortSignal, () => abortControllerWithReason(controller, parentAbortSignal.reason));\r\n  return (taskExecutor, opts) => {\r\n    assertFunction(taskExecutor, \"taskExecutor\");\r\n    const childAbortController = new AbortController();\r\n    linkControllers(childAbortController);\r\n    const result = runTask(async () => {\r\n      validateActive(parentAbortSignal);\r\n      validateActive(childAbortController.signal);\r\n      const result2 = await taskExecutor({\r\n        pause: createPause(childAbortController.signal),\r\n        delay: createDelay(childAbortController.signal),\r\n        signal: childAbortController.signal\r\n      });\r\n      validateActive(childAbortController.signal);\r\n      return result2;\r\n    }, () => abortControllerWithReason(childAbortController, taskCompleted));\r\n    if (opts?.autoJoin) {\r\n      parentBlockingPromises.push(result.catch(noop2));\r\n    }\r\n    return {\r\n      result: createPause(parentAbortSignal)(result),\r\n      cancel() {\r\n        abortControllerWithReason(childAbortController, taskCancelled);\r\n      }\r\n    };\r\n  };\r\n};\r\nvar createTakePattern = (startListening, signal) => {\r\n  const take = async (predicate, timeout) => {\r\n    validateActive(signal);\r\n    let unsubscribe = () => {\r\n    };\r\n    const tuplePromise = new Promise((resolve, reject) => {\r\n      let stopListening = startListening({\r\n        predicate,\r\n        effect: (action, listenerApi) => {\r\n          listenerApi.unsubscribe();\r\n          resolve([action, listenerApi.getState(), listenerApi.getOriginalState()]);\r\n        }\r\n      });\r\n      unsubscribe = () => {\r\n        stopListening();\r\n        reject();\r\n      };\r\n    });\r\n    const promises = [tuplePromise];\r\n    if (timeout != null) {\r\n      promises.push(new Promise((resolve) => setTimeout(resolve, timeout, null)));\r\n    }\r\n    try {\r\n      const output = await raceWithSignal(signal, Promise.race(promises));\r\n      validateActive(signal);\r\n      return output;\r\n    } finally {\r\n      unsubscribe();\r\n    }\r\n  };\r\n  return (predicate, timeout) => catchRejection(take(predicate, timeout));\r\n};\r\nvar getListenerEntryPropsFrom = (options) => {\r\n  let {\r\n    type,\r\n    actionCreator,\r\n    matcher,\r\n    predicate,\r\n    effect\r\n  } = options;\r\n  if (type) {\r\n    predicate = createAction(type).match;\r\n  } else if (actionCreator) {\r\n    type = actionCreator.type;\r\n    predicate = actionCreator.match;\r\n  } else if (matcher) {\r\n    predicate = matcher;\r\n  } else if (predicate) {\r\n  } else {\r\n    throw new Error( false ? 0 : \"Creating or removing a listener requires one of the known fields for matching an action\");\r\n  }\r\n  assertFunction(effect, \"options.listener\");\r\n  return {\r\n    predicate,\r\n    type,\r\n    effect\r\n  };\r\n};\r\nvar createListenerEntry = /* @__PURE__ */ assign((options) => {\r\n  const {\r\n    type,\r\n    predicate,\r\n    effect\r\n  } = getListenerEntryPropsFrom(options);\r\n  const entry = {\r\n    id: nanoid(),\r\n    effect,\r\n    type,\r\n    predicate,\r\n    pending: /* @__PURE__ */ new Set(),\r\n    unsubscribe: () => {\r\n      throw new Error( false ? 0 : \"Unsubscribe not initialized\");\r\n    }\r\n  };\r\n  return entry;\r\n}, {\r\n  withTypes: () => createListenerEntry\r\n});\r\nvar findListenerEntry = (listenerMap, options) => {\r\n  const {\r\n    type,\r\n    effect,\r\n    predicate\r\n  } = getListenerEntryPropsFrom(options);\r\n  return Array.from(listenerMap.values()).find((entry) => {\r\n    const matchPredicateOrType = typeof type === \"string\" ? entry.type === type : entry.predicate === predicate;\r\n    return matchPredicateOrType && entry.effect === effect;\r\n  });\r\n};\r\nvar cancelActiveListeners = (entry) => {\r\n  entry.pending.forEach((controller) => {\r\n    abortControllerWithReason(controller, listenerCancelled);\r\n  });\r\n};\r\nvar createClearListenerMiddleware = (listenerMap) => {\r\n  return () => {\r\n    listenerMap.forEach(cancelActiveListeners);\r\n    listenerMap.clear();\r\n  };\r\n};\r\nvar safelyNotifyError = (errorHandler, errorToNotify, errorInfo) => {\r\n  try {\r\n    errorHandler(errorToNotify, errorInfo);\r\n  } catch (errorHandlerError) {\r\n    setTimeout(() => {\r\n      throw errorHandlerError;\r\n    }, 0);\r\n  }\r\n};\r\nvar addListener = /* @__PURE__ */ assign(/* @__PURE__ */ createAction(`${alm}/add`), {\r\n  withTypes: () => addListener\r\n});\r\nvar clearAllListeners = /* @__PURE__ */ createAction(`${alm}/removeAll`);\r\nvar removeListener = /* @__PURE__ */ assign(/* @__PURE__ */ createAction(`${alm}/remove`), {\r\n  withTypes: () => removeListener\r\n});\r\nvar defaultErrorHandler = (...args) => {\r\n  console.error(`${alm}/error`, ...args);\r\n};\r\nvar createListenerMiddleware = (middlewareOptions = {}) => {\r\n  const listenerMap = /* @__PURE__ */ new Map();\r\n  const {\r\n    extra,\r\n    onError = defaultErrorHandler\r\n  } = middlewareOptions;\r\n  assertFunction(onError, \"onError\");\r\n  const insertEntry = (entry) => {\r\n    entry.unsubscribe = () => listenerMap.delete(entry.id);\r\n    listenerMap.set(entry.id, entry);\r\n    return (cancelOptions) => {\r\n      entry.unsubscribe();\r\n      if (cancelOptions?.cancelActive) {\r\n        cancelActiveListeners(entry);\r\n      }\r\n    };\r\n  };\r\n  const startListening = (options) => {\r\n    const entry = findListenerEntry(listenerMap, options) ?? createListenerEntry(options);\r\n    return insertEntry(entry);\r\n  };\r\n  assign(startListening, {\r\n    withTypes: () => startListening\r\n  });\r\n  const stopListening = (options) => {\r\n    const entry = findListenerEntry(listenerMap, options);\r\n    if (entry) {\r\n      entry.unsubscribe();\r\n      if (options.cancelActive) {\r\n        cancelActiveListeners(entry);\r\n      }\r\n    }\r\n    return !!entry;\r\n  };\r\n  assign(stopListening, {\r\n    withTypes: () => stopListening\r\n  });\r\n  const notifyListener = async (entry, action, api, getOriginalState) => {\r\n    const internalTaskController = new AbortController();\r\n    const take = createTakePattern(startListening, internalTaskController.signal);\r\n    const autoJoinPromises = [];\r\n    try {\r\n      entry.pending.add(internalTaskController);\r\n      await Promise.resolve(entry.effect(\r\n        action,\r\n        // Use assign() rather than ... to avoid extra helper functions added to bundle\r\n        assign({}, api, {\r\n          getOriginalState,\r\n          condition: (predicate, timeout) => take(predicate, timeout).then(Boolean),\r\n          take,\r\n          delay: createDelay(internalTaskController.signal),\r\n          pause: createPause(internalTaskController.signal),\r\n          extra,\r\n          signal: internalTaskController.signal,\r\n          fork: createFork(internalTaskController.signal, autoJoinPromises),\r\n          unsubscribe: entry.unsubscribe,\r\n          subscribe: () => {\r\n            listenerMap.set(entry.id, entry);\r\n          },\r\n          cancelActiveListeners: () => {\r\n            entry.pending.forEach((controller, _, set) => {\r\n              if (controller !== internalTaskController) {\r\n                abortControllerWithReason(controller, listenerCancelled);\r\n                set.delete(controller);\r\n              }\r\n            });\r\n          },\r\n          cancel: () => {\r\n            abortControllerWithReason(internalTaskController, listenerCancelled);\r\n            entry.pending.delete(internalTaskController);\r\n          },\r\n          throwIfCancelled: () => {\r\n            validateActive(internalTaskController.signal);\r\n          }\r\n        })\r\n      ));\r\n    } catch (listenerError) {\r\n      if (!(listenerError instanceof TaskAbortError)) {\r\n        safelyNotifyError(onError, listenerError, {\r\n          raisedBy: \"effect\"\r\n        });\r\n      }\r\n    } finally {\r\n      await Promise.all(autoJoinPromises);\r\n      abortControllerWithReason(internalTaskController, listenerCompleted);\r\n      entry.pending.delete(internalTaskController);\r\n    }\r\n  };\r\n  const clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\r\n  const middleware = (api) => (next) => (action) => {\r\n    if (!(0,redux__WEBPACK_IMPORTED_MODULE_0__.isAction)(action)) {\r\n      return next(action);\r\n    }\r\n    if (addListener.match(action)) {\r\n      return startListening(action.payload);\r\n    }\r\n    if (clearAllListeners.match(action)) {\r\n      clearListenerMiddleware();\r\n      return;\r\n    }\r\n    if (removeListener.match(action)) {\r\n      return stopListening(action.payload);\r\n    }\r\n    let originalState = api.getState();\r\n    const getOriginalState = () => {\r\n      if (originalState === INTERNAL_NIL_TOKEN) {\r\n        throw new Error( false ? 0 : `${alm}: getOriginalState can only be called synchronously`);\r\n      }\r\n      return originalState;\r\n    };\r\n    let result;\r\n    try {\r\n      result = next(action);\r\n      if (listenerMap.size > 0) {\r\n        const currentState = api.getState();\r\n        const listenerEntries = Array.from(listenerMap.values());\r\n        for (const entry of listenerEntries) {\r\n          let runListener = false;\r\n          try {\r\n            runListener = entry.predicate(action, currentState, originalState);\r\n          } catch (predicateError) {\r\n            runListener = false;\r\n            safelyNotifyError(onError, predicateError, {\r\n              raisedBy: \"predicate\"\r\n            });\r\n          }\r\n          if (!runListener) {\r\n            continue;\r\n          }\r\n          notifyListener(entry, action, api, getOriginalState);\r\n        }\r\n      }\r\n    } finally {\r\n      originalState = INTERNAL_NIL_TOKEN;\r\n    }\r\n    return result;\r\n  };\r\n  return {\r\n    middleware,\r\n    startListening,\r\n    stopListening,\r\n    clearListeners: clearListenerMiddleware\r\n  };\r\n};\r\n\r\n// src/dynamicMiddleware/index.ts\r\n\r\nvar createMiddlewareEntry = (middleware) => ({\r\n  middleware,\r\n  applied: /* @__PURE__ */ new Map()\r\n});\r\nvar matchInstance = (instanceId) => (action) => action?.meta?.instanceId === instanceId;\r\nvar createDynamicMiddleware = () => {\r\n  const instanceId = nanoid();\r\n  const middlewareMap = /* @__PURE__ */ new Map();\r\n  const withMiddleware = Object.assign(createAction(\"dynamicMiddleware/add\", (...middlewares) => ({\r\n    payload: middlewares,\r\n    meta: {\r\n      instanceId\r\n    }\r\n  })), {\r\n    withTypes: () => withMiddleware\r\n  });\r\n  const addMiddleware = Object.assign(function addMiddleware2(...middlewares) {\r\n    middlewares.forEach((middleware2) => {\r\n      getOrInsertComputed(middlewareMap, middleware2, createMiddlewareEntry);\r\n    });\r\n  }, {\r\n    withTypes: () => addMiddleware\r\n  });\r\n  const getFinalMiddleware = (api) => {\r\n    const appliedMiddleware = Array.from(middlewareMap.values()).map((entry) => getOrInsertComputed(entry.applied, api, entry.middleware));\r\n    return (0,redux__WEBPACK_IMPORTED_MODULE_0__.compose)(...appliedMiddleware);\r\n  };\r\n  const isWithMiddleware = isAllOf(withMiddleware, matchInstance(instanceId));\r\n  const middleware = (api) => (next) => (action) => {\r\n    if (isWithMiddleware(action)) {\r\n      addMiddleware(...action.payload);\r\n      return api.dispatch;\r\n    }\r\n    return getFinalMiddleware(api)(next)(action);\r\n  };\r\n  return {\r\n    middleware,\r\n    addMiddleware,\r\n    withMiddleware,\r\n    instanceId\r\n  };\r\n};\r\n\r\n// src/combineSlices.ts\r\n\r\nvar isSliceLike = (maybeSliceLike) => \"reducerPath\" in maybeSliceLike && typeof maybeSliceLike.reducerPath === \"string\";\r\nvar getReducers = (slices) => slices.flatMap((sliceOrMap) => isSliceLike(sliceOrMap) ? [[sliceOrMap.reducerPath, sliceOrMap.reducer]] : Object.entries(sliceOrMap));\r\nvar ORIGINAL_STATE = Symbol.for(\"rtk-state-proxy-original\");\r\nvar isStateProxy = (value) => !!value && !!value[ORIGINAL_STATE];\r\nvar stateProxyMap = /* @__PURE__ */ new WeakMap();\r\nvar createStateProxy = (state, reducerMap, initialStateCache) => getOrInsertComputed(stateProxyMap, state, () => new Proxy(state, {\r\n  get: (target, prop, receiver) => {\r\n    if (prop === ORIGINAL_STATE) return target;\r\n    const result = Reflect.get(target, prop, receiver);\r\n    if (typeof result === \"undefined\") {\r\n      const cached = initialStateCache[prop];\r\n      if (typeof cached !== \"undefined\") return cached;\r\n      const reducer = reducerMap[prop];\r\n      if (reducer) {\r\n        const reducerResult = reducer(void 0, {\r\n          type: nanoid()\r\n        });\r\n        if (typeof reducerResult === \"undefined\") {\r\n          throw new Error( false ? 0 : `The slice reducer for key \"${prop.toString()}\" returned undefined when called for selector(). If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);\r\n        }\r\n        initialStateCache[prop] = reducerResult;\r\n        return reducerResult;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}));\r\nvar original = (state) => {\r\n  if (!isStateProxy(state)) {\r\n    throw new Error( false ? 0 : \"original must be used on state Proxy\");\r\n  }\r\n  return state[ORIGINAL_STATE];\r\n};\r\nvar emptyObject = {};\r\nvar noopReducer = (state = emptyObject) => state;\r\nfunction combineSlices(...slices) {\r\n  const reducerMap = Object.fromEntries(getReducers(slices));\r\n  const getReducer = () => Object.keys(reducerMap).length ? (0,redux__WEBPACK_IMPORTED_MODULE_0__.combineReducers)(reducerMap) : noopReducer;\r\n  let reducer = getReducer();\r\n  function combinedReducer(state, action) {\r\n    return reducer(state, action);\r\n  }\r\n  combinedReducer.withLazyLoadedSlices = () => combinedReducer;\r\n  const initialStateCache = {};\r\n  const inject = (slice, config = {}) => {\r\n    const {\r\n      reducerPath,\r\n      reducer: reducerToInject\r\n    } = slice;\r\n    const currentReducer = reducerMap[reducerPath];\r\n    if (!config.overrideExisting && currentReducer && currentReducer !== reducerToInject) {\r\n      if (typeof process !== \"undefined\" && \"development\" === \"development\") {\r\n        console.error(`called \\`inject\\` to override already-existing reducer ${reducerPath} without specifying \\`overrideExisting: true\\``);\r\n      }\r\n      return combinedReducer;\r\n    }\r\n    if (config.overrideExisting && currentReducer !== reducerToInject) {\r\n      delete initialStateCache[reducerPath];\r\n    }\r\n    reducerMap[reducerPath] = reducerToInject;\r\n    reducer = getReducer();\r\n    return combinedReducer;\r\n  };\r\n  const selector = Object.assign(function makeSelector(selectorFn, selectState) {\r\n    return function selector2(state, ...args) {\r\n      return selectorFn(createStateProxy(selectState ? selectState(state, ...args) : state, reducerMap, initialStateCache), ...args);\r\n    };\r\n  }, {\r\n    original\r\n  });\r\n  return Object.assign(combinedReducer, {\r\n    inject,\r\n    selector\r\n  });\r\n}\r\n\r\n// src/formatProdErrorMessage.ts\r\nfunction formatProdErrorMessage(code) {\r\n  return `Minified Redux Toolkit error #${code}; visit https://redux-toolkit.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;\r\n}\r\n\r\n//# sourceMappingURL=redux-toolkit.modern.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs\n");

/***/ })

};
;